<%
require 'json'
search={:header => [], :response_header => [] }
search[:description]=<<EOD
**Search for a labellable**

* `description` describe the search
* `model` labellable model 
* `criteria` set parameters for the search. Here, it can be a combination of the following attributes:
    * `position`
    * `type`
    * `value`

Searching for a labellable is useful to get a resource without knowing its model. 
In fact, in a normal search, the model attribute needs to be set. In the case the model of the
searched resource isn't known in advance, we can search its corresponding labellable,
then get the resource (the uuid of the resource appears under the name attribute in the labellable JSON).

To actually get the search results, you need to access the first page of result 
thanks to the `first` action in the JSON response.
EOD
search[:method] = "POST"
search[:url]='/searches'
search[:header] << 'Accept: application/json'
search[:setup]=<<EOD
tube = Lims::Core::Laboratory::Tube.new
labellable = Lims::Core::Labels::Labellable.new({
  :name => '11111111-2222-3333-4444-666666666666',
  :type => 'resource',
  :content => {'barcode' => Lims::Core::Labels::SangerBarcode.new({:value => 'ABC123456'})}
})

save_with_uuid tube => [1,2,3,4,6], labellable => [1,2,3,4,7]
EOD
search[:parameters]=<<EOD
{ "search": {
    "description": "search for a labellable",
    "model": "labellable",
    "criteria": {
        "label": {
            "value": "ABC123456"
        }
    }
}}
EOD
search[:status]=200
search[:response_header] << 'Content-Type: application/json'
search[:response]=<<EOD
{
    "search": {
        "actions": {
            "read": "/11111111-2222-3333-4444-555555555555",
            "first": "/11111111-2222-3333-4444-555555555555/page=1",
            "last": "/11111111-2222-3333-4444-555555555555/page=-1"
        },
        "uuid": "11111111-2222-3333-4444-555555555555"
    }
}
EOD

result = {:header => [], :response_header => [] }
result[:description] = "Get the search result"
result[:method] = "GET"
result[:url] = "/11111111-2222-3333-4444-555555555555/page=1"
result[:header] << 'Accept: application/json'
result[:status] = 200
result[:response_header] << 'Content-Type: application/json'
result[:response] = <<EOD
{
"actions": {
  "read": "http://example.org/labellables/page=1",
  "first": "http://example.org/labellables/page=1",
  "last": "http://example.org/labellables/page=-1"
},
"size": 1,
"labellables": [
  {
    "actions": {
      "read": "http://example.org/11111111-2222-3333-4444-777777777777",
      "create": "http://example.org/11111111-2222-3333-4444-777777777777",
      "update": "http://example.org/11111111-2222-3333-4444-777777777777",
      "delete": "http://example.org/11111111-2222-3333-4444-777777777777"
    },
    "uuid": "11111111-2222-3333-4444-777777777777",
    "name": "11111111-2222-3333-4444-666666666666",
    "type": "resource",
    "labels": {
      "barcode": {
        "value": "ABC123456",
        "type": "sanger-barcode"
      }
    }
  }
]}
EOD

spec_json = { "steps" => [search, result] }
%>
<%= spec_json.to_json %>
