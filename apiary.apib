HOST: http://s2-api.sanger.ac.uk

--- S2 Lims-API ---
---
Welcome to our API documentation. 

S2 API provides a JSON RESTful interface. The path to the root URL `/` only is needed to interact with the API.
All the other actions are embedded in every JSON response.
Please note that all URLs are to be considered unstable. As a consequence, you should only refer to the actions
elements returned in the response.

Please find below the different actions available in the JSON:

* `create` creates a new resource using a HTTP POST request
* `read`, `first` and `last` actions are used for pagination through HTTP GET requests
* `update` action update a resource using a HTTP PUT request
* `delete` action delete a resource using a HTTP DELETE request

In top of the above actions, more specific actions are available to interact between multiple resources.
These actions use generally HTTP POST request and are listed under the root JSON response (for example `/actions/tube_rack_transfer`).

Please note you will generally find two different URLs to create a new resource, which produce an identical result:
`/resources` or `/actions/create_resource`.
---
--
Root
--

The root JSON lists all the resources available through the API and all the actions which can be performed. 
A resource responds to all the actions listed under its `actions` elements.
Consider this URL and the JSON response like the entry point for S2 API. All the other interactions through the 
API can be performed browsing this JSON response.
GET /
> Accept: application/json
< 200
< Content-Type: application/json
 {
         "actions": {
           "actions": {
             "create": "http://example.org/actions/action"
           }
         },
         "batches": {
           "actions": {
             "create": "http://example.org/batches",
             "read": "http://example.org/batches",
             "first": "http://example.org/batches/page=1",
             "last": "http://example.org/batches/page=-1"
           }
         },
         "users": {
           "actions": {
             "create": "http://example.org/users",
             "read": "http://example.org/users",
             "first": "http://example.org/users/page=1",
             "last": "http://example.org/users/page=-1"
           }
         },
         "studies": {
           "actions": {
             "create": "http://example.org/studies",
             "read": "http://example.org/studies",
             "first": "http://example.org/studies/page=1",
             "last": "http://example.org/studies/page=-1"
           }
         },
         "orders": {
           "actions": {
             "create": "http://example.org/orders",
             "read": "http://example.org/orders",
             "first": "http://example.org/orders/page=1",
             "last": "http://example.org/orders/page=-1"
           }
         },
         "projects": {
           "actions": {
             "create": "http://example.org/projects",
             "read": "http://example.org/projects",
             "first": "http://example.org/projects/page=1",
             "last": "http://example.org/projects/page=-1"
           }
         },
         "samples": {
           "actions": {
             "create": "http://example.org/samples",
             "read": "http://example.org/samples",
             "first": "http://example.org/samples/page=1",
             "last": "http://example.org/samples/page=-1"
           }
         },
         "oligos": {
           "actions": {
             "create": "http://example.org/oligos",
             "read": "http://example.org/oligos",
             "first": "http://example.org/oligos/page=1",
             "last": "http://example.org/oligos/page=-1"
           }
         },
         "aliquots": {
           "actions": {
             "create": "http://example.org/aliquots",
             "read": "http://example.org/aliquots",
             "first": "http://example.org/aliquots/page=1",
             "last": "http://example.org/aliquots/page=-1"
           }
         },
         "flowcells": {
           "actions": {
             "create": "http://example.org/flowcells",
             "read": "http://example.org/flowcells",
             "first": "http://example.org/flowcells/page=1",
             "last": "http://example.org/flowcells/page=-1"
           }
         },
         "gels": {
           "actions": {
             "create": "http://example.org/gels",
             "read": "http://example.org/gels",
             "first": "http://example.org/gels/page=1",
             "last": "http://example.org/gels/page=-1"
           }
         },
         "labellables": {
           "actions": {
             "create": "http://example.org/labellables",
             "read": "http://example.org/labellables",
             "first": "http://example.org/labellables/page=1",
             "last": "http://example.org/labellables/page=-1"
           }
         },
         "sanger_barcodes": {
           "actions": {
             "create": "http://example.org/sanger_barcodes",
             "read": "http://example.org/sanger_barcodes",
             "first": "http://example.org/sanger_barcodes/page=1",
             "last": "http://example.org/sanger_barcodes/page=-1"
           }
         },
         "ean13_barcodes": {
           "actions": {
             "create": "http://example.org/ean13_barcodes",
             "read": "http://example.org/ean13_barcodes",
             "first": "http://example.org/ean13_barcodes/page=1",
             "last": "http://example.org/ean13_barcodes/page=-1"
           }
         },
         "barcode2_ds": {
           "actions": {
             "create": "http://example.org/barcode2_ds",
             "read": "http://example.org/barcode2_ds",
             "first": "http://example.org/barcode2_ds/page=1",
             "last": "http://example.org/barcode2_ds/page=-1"
           }
         },
         "plates": {
           "actions": {
             "create": "http://example.org/plates",
             "read": "http://example.org/plates",
             "first": "http://example.org/plates/page=1",
             "last": "http://example.org/plates/page=-1"
           }
         },
         "spin_columns": {
           "actions": {
             "create": "http://example.org/spin_columns",
             "read": "http://example.org/spin_columns",
             "first": "http://example.org/spin_columns/page=1",
             "last": "http://example.org/spin_columns/page=-1"
           }
         },
         "tubes": {
           "actions": {
             "create": "http://example.org/tubes",
             "read": "http://example.org/tubes",
             "first": "http://example.org/tubes/page=1",
             "last": "http://example.org/tubes/page=-1"
           }
         },
         "tube_racks": {
           "actions": {
             "create": "http://example.org/tube_racks",
             "read": "http://example.org/tube_racks",
             "first": "http://example.org/tube_racks/page=1",
             "last": "http://example.org/tube_racks/page=-1"
           }
         },
         "tag_groups": {
           "actions": {
             "create": "http://example.org/tag_groups",
             "read": "http://example.org/tag_groups",
             "first": "http://example.org/tag_groups/page=1",
             "last": "http://example.org/tag_groups/page=-1"
           }
         },
         "searches": {
           "actions": {
             "create": "http://example.org/searches",
             "read": "http://example.org/searches",
             "first": "http://example.org/searches/page=1",
             "last": "http://example.org/searches/page=-1"
           }
         },
         "multi_criteria_filters": {
           "actions": {
             "create": "http://example.org/multi_criteria_filters",
             "read": "http://example.org/multi_criteria_filters",
             "first": "http://example.org/multi_criteria_filters/page=1",
             "last": "http://example.org/multi_criteria_filters/page=-1"
           }
         },
         "label_filters": {
           "actions": {
             "create": "http://example.org/label_filters",
             "read": "http://example.org/label_filters",
             "first": "http://example.org/label_filters/page=1",
             "last": "http://example.org/label_filters/page=-1"
           }
         },
         "order_filters": {
           "actions": {
             "create": "http://example.org/order_filters",
             "read": "http://example.org/order_filters",
             "first": "http://example.org/order_filters/page=1",
             "last": "http://example.org/order_filters/page=-1"
           }
         },
         "batch_filters": {
           "actions": {
             "create": "http://example.org/batch_filters",
             "read": "http://example.org/batch_filters",
             "first": "http://example.org/batch_filters/page=1",
             "last": "http://example.org/batch_filters/page=-1"
           }
         },
         "uuid_resources": {
           "actions": {
             "create": "http://example.org/uuid_resources",
             "read": "http://example.org/uuid_resources",
             "first": "http://example.org/uuid_resources/page=1",
             "last": "http://example.org/uuid_resources/page=-1"
           }
         },
         "create_batches": {
           "actions": {
             "create": "http://example.org/actions/create_batch"
           }
         },
         "create_flowcells": {
           "actions": {
             "create": "http://example.org/actions/create_flowcell"
           }
         },
         "create_gels": {
           "actions": {
             "create": "http://example.org/actions/create_gel"
           }
         },
         "create_labels": {
           "actions": {
             "create": "http://example.org/actions/create_label"
           }
         },
         "create_labellables": {
           "actions": {
             "create": "http://example.org/actions/create_labellable"
           }
         },
         "create_orders": {
           "actions": {
             "create": "http://example.org/actions/create_order"
           }
         },
         "create_plates": {
           "actions": {
             "create": "http://example.org/actions/create_plate"
           }
         },
         "create_searches": {
           "actions": {
             "create": "http://example.org/actions/create_search"
           }
         },
         "create_spin_columns": {
           "actions": {
             "create": "http://example.org/actions/create_spin_column"
           }
         },
         "create_tubes": {
           "actions": {
             "create": "http://example.org/actions/create_tube"
           }
         },
         "create_tube_racks": {
           "actions": {
             "create": "http://example.org/actions/create_tube_rack"
           }
         },
         "plate_transfers": {
           "actions": {
             "create": "http://example.org/actions/plate_transfer"
           }
         },
         "tag_wells": {
           "actions": {
             "create": "http://example.org/actions/tag_wells"
           }
         },
         "transfer_plates_to_plates": {
           "actions": {
             "create": "http://example.org/actions/transfer_plates_to_plates"
           }
         },
         "transfer_tubes_to_tubes": {
           "actions": {
             "create": "http://example.org/actions/transfer_tubes_to_tubes"
           }
         },
         "transfer_wells_to_tubes": {
           "actions": {
             "create": "http://example.org/actions/transfer_wells_to_tubes"
           }
         },
         "tube_rack_moves": {
           "actions": {
             "create": "http://example.org/actions/tube_rack_move"
           }
         },
         "tube_rack_transfers": {
           "actions": {
             "create": "http://example.org/actions/tube_rack_transfer"
           }
         },
         "update_orders": {
           "actions": {
             "create": "http://example.org/actions/update_order"
           }
         },
         "update_plates": {
           "actions": {
             "create": "http://example.org/actions/update_plate"
           }
         },
         "update_tubes": {
           "actions": {
             "create": "http://example.org/actions/update_tube"
           }
         },
         "update_tube_racks": {
           "actions": {
             "create": "http://example.org/actions/update_tube_rack"
           }
         },
         "revision": 3
       }


--
Tube Resource
--
**List actions for a tube resource.**

* `create` creates a new tube via HTTP POST request
* `read` currently returns the list of actions for a tube resource via HTTP GET request
* `first` lists the first tube resources in a page browsing system
* `last` lists the last tube resources in a page browsing system
GET /tubes
> Accept: application/json
< 200
< Content-Type: application/json
{ "tubes": {
    "actions": {
        "create": "/tubes",
        "read": "/tubes",
        "first": "/tubes/page=1",
        "last": "/tubes/page=-1"
    }
} }


**Create an new empty tube.**

POST /tubes
> Accept: application/json
{ "tube": {}}
< 200
< Content-Type: application/json
{ "tube": {
    "actions": {
        "read": "/11111111-2222-3333-4444-555555555555",
        "create": "/11111111-2222-3333-4444-555555555555",
        "update": "/11111111-2222-3333-4444-555555555555",
        "delete": "/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "type": null,
    "max_volume": null,
    "aliquots": []
}}                                                     


**Create a new tube with samples.** It takes in parameters an array of aliquots, each aliquot is 
identified with the following attributes:

* `type` the actual type of the tube
* `max_volume` the max volume a tube can hold
* `sample_uuid` uuid of a sample
* `type` aliquot type
* `aliquot_quantity` volume (ul) if liquid, mass (mg) if solid
POST /tubes
> Accept: application/json
{ "tube": { 
    "type": "Eppendorf",
    "max_volume": 2,
    "aliquots": [
        { "sample_uuid": "11111111-2222-3333-4444-666666666666", "type": "NA", "quantity": 5 }
    ] 
}}
< 200
< Content-Type: application/json
{ "tube": {
    "actions": {
        "read": "/11111111-2222-3333-4444-555555555555",
        "create": "/11111111-2222-3333-4444-555555555555",
        "update": "/11111111-2222-3333-4444-555555555555",
        "delete": "/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "type": "Eppendorf",
    "max_volume": 2,
    "aliquots": [
        { "sample": {
            "actions": {
                "read": "/11111111-2222-3333-4444-666666666666",
                "create": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666"
            },
            "uuid": "11111111-2222-3333-4444-666666666666",
            "name": "sample 1"
        },
        "quantity": 5,
        "type": "NA",
        "unit": "mole"
        }
    ]
}}


**Bulk create tubes**

* `tubes` is mandatory
POST /actions/bulk_create_tube
> Accept: application/json
{ "bulk_create_tube": {
    "tubes": [
        {
            "type": "Eppendorf",
            "max_volume": 2,
            "aliquots": [
                {
                    "sample_uuid": "11111111-0000-0000-0000-111111111111",
                    "type": "NA",
                    "quantity": 5
                }
            ]
        },
        {
            "type": "Eppendorf",
            "max_volume": 10,
            "aliquots": [
                {
                    "sample_uuid": "11111111-0000-0000-0000-222222222222",
                    "type": "RNA",
                    "quantity": 15
                }
            ]
        },
        {
            "type": "New type",
            "max_volume": 15,
            "aliquots": [
                {
                    "sample_uuid": "11111111-0000-0000-0000-333333333333",
                    "type": "DNA",
                    "quantity": 25
                }
            ]
        }
    ] 
}}
< 200
< Content-Type: application/json
{
    "bulk_create_tube": {
        "actions": {
        },
        "user": "user",
        "application": "application",
        "result": {
            "tubes": [
                {
                    "actions": {
                        "read": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "create": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "update": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "delete": "http://example.org/11111111-2222-3333-4444-555555555555"
                    },
                    "uuid": "11111111-2222-3333-4444-555555555555",
                    "type": "Eppendorf",
                    "max_volume": 2,
                    "aliquots": [
                        {
                            "sample": {
                                "actions": {
                                    "read": "http://example.org/11111111-0000-0000-0000-111111111111",
                                    "create": "http://example.org/11111111-0000-0000-0000-111111111111",
                                    "update": "http://example.org/11111111-0000-0000-0000-111111111111",
                                    "delete": "http://example.org/11111111-0000-0000-0000-111111111111"
                                },
                                "uuid": "11111111-0000-0000-0000-111111111111",
                                "name": null
                            },
                            "quantity": 5,
                            "type": "NA",
                            "unit": "mole"
                        }
                    ]
                },
                {
                    "actions": {
                        "read": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "create": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "update": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "delete": "http://example.org/11111111-2222-3333-4444-666666666666"
                    },
                    "uuid": "11111111-2222-3333-4444-666666666666",
                    "type": "Eppendorf",
                    "max_volume": 10,
                    "aliquots": [
                        {
                            "sample": {
                                "actions": {
                                    "read": "http://example.org/11111111-0000-0000-0000-222222222222",
                                    "create": "http://example.org/11111111-0000-0000-0000-222222222222",
                                    "update": "http://example.org/11111111-0000-0000-0000-222222222222",
                                    "delete": "http://example.org/11111111-0000-0000-0000-222222222222"
                                },
                                "uuid": "11111111-0000-0000-0000-222222222222",
                                "name": null
                            },
                            "quantity": 15,
                            "type": "RNA",
                            "unit": "mole"
                        }
                    ]
                },
                {
                    "actions": {
                        "read": "http://example.org/11111111-2222-3333-4444-777777777777",
                        "create": "http://example.org/11111111-2222-3333-4444-777777777777",
                        "update": "http://example.org/11111111-2222-3333-4444-777777777777",
                        "delete": "http://example.org/11111111-2222-3333-4444-777777777777"
                    },
                    "uuid": "11111111-2222-3333-4444-777777777777",
                    "type": "New type",
                    "max_volume": 15,
                    "aliquots": [
                        {
                            "sample": {
                                "actions": {
                                    "read": "http://example.org/11111111-0000-0000-0000-333333333333",
                                    "create": "http://example.org/11111111-0000-0000-0000-333333333333",
                                    "update": "http://example.org/11111111-0000-0000-0000-333333333333",
                                    "delete": "http://example.org/11111111-0000-0000-0000-333333333333"
                                },
                                "uuid": "11111111-0000-0000-0000-333333333333",
                                "name": null
                            },
                            "quantity": 25,
                            "type": "DNA",
                            "unit": "mole"
                        }
                    ]
                }
            ]
        },
        "tubes": [
            {
                "type": "Eppendorf",
                "max_volume": 2,
                "aliquots": [
                    {
                        "sample_uuid": "11111111-0000-0000-0000-111111111111",
                        "type": "NA",
                        "quantity": 5
                    }
                ]
            },
            {
                "type": "Eppendorf",
                "max_volume": 10,
                "aliquots": [
                    {
                        "sample_uuid": "11111111-0000-0000-0000-222222222222",
                        "type": "RNA",
                        "quantity": 15
                    }
                ]
            },
            {
                "type": "New type",
                "max_volume": 15,
                "aliquots": [
                    {
                        "sample_uuid": "11111111-0000-0000-0000-333333333333",
                        "type": "DNA",
                        "quantity": 25
                    }
                ]
            }
        ]
    }
}


**Update a tube.** All the aliquots in the tube will be updated with 
`aliquot_type` and `aliquot_quantity`.

* `type` the actual type of the tube
* `max_volume` the max volume a tube can hold
* `aliquot_type`
* `aliquot_quantity` volume (ul) if liquid, mass (mg) if solid
PUT /11111111-2222-3333-4444-555555555555
> Accept: application/json
{ "aliquot_type": "DNA", "aliquot_quantity": 10, "type": "Eppendorf", "max_volume": 2 }
< 200
< Content-Type: application/json
{
    "tube": {
        "actions": {
            "read": "/11111111-2222-3333-4444-555555555555",
            "create": "/11111111-2222-3333-4444-555555555555",
            "update": "/11111111-2222-3333-4444-555555555555",
            "delete": "/11111111-2222-3333-4444-555555555555"
        },
        "uuid": "11111111-2222-3333-4444-555555555555",
        "type": "Eppendorf",
        "max_volume": 2,
        "aliquots": [
            { "sample": {
                "actions": {
                    "read": "/11111111-2222-3333-4444-666666666666",
                    "create": "/11111111-2222-3333-4444-666666666666",
                    "update": "/11111111-2222-3333-4444-666666666666",
                    "delete": "/11111111-2222-3333-4444-666666666666"
                },
                "uuid": "11111111-2222-3333-4444-666666666666",
                "name": "sample 1"
            },
            "quantity": 10,
            "type": "DNA",
            "unit": "mole"
            }
        ]
    }
}


**Transfer the content from one tube to multiple tubes**.

* `source_uuid` source tube uuid
* `target_uuid` target tube uuid
* `amount` amount taken from source tube and transfered in target tube
* `fraction` fraction (between 0 and 1) of each aliquot from source tube to be transfered in target tube (use amount **or** fraction)
* `aliquot_type` set a new type for all aliquots in the target tube

The example below shows how to make a transfer from one tube to multiple tubes:

* from tube `11111111-2222-3333-4444-555555555555` to tube `11111111-2222-3333-4444-666666666666` 
and tube `11111111-2222-3333-4444-777777777777`

**Note you can replace tube uuids with spin column uuids in order to make a transfer from one tube to 
a target tube and a target spin columns**
POST /actions/transfer_tubes_to_tubes
> Accept: application/json
{ "transfer_tubes_to_tubes": { 
    "transfers": [
        {
            "source_uuid": "11111111-2222-3333-4444-555555555555", 
            "target_uuid": "11111111-2222-3333-4444-666666666666",
            "amount": 5,
            "aliquot_type": "DNA"
        },
        {
            "source_uuid": "11111111-2222-3333-4444-555555555555", 
            "target_uuid": "11111111-2222-3333-4444-777777777777",
            "amount": 5,
            "aliquot_type": "RNA"
        }
    ]}
}
< 200
< Content-Type: application/json
{ "transfer_tubes_to_tubes": {
    "actions": {},
    "user": "user",
    "application": "application",
    "result": {
        "sources": [
            { "tube": {
                "actions": {
                    "read": "/11111111-2222-3333-4444-555555555555",
                    "create": "/11111111-2222-3333-4444-555555555555",
                    "update": "/11111111-2222-3333-4444-555555555555",
                    "delete": "/11111111-2222-3333-4444-555555555555"
                },
                "uuid": "11111111-2222-3333-4444-555555555555",
                "type": null,
                "max_volume": null,
                "aliquots": [
                    { "sample": {
                        "actions": {
                            "read": "/11111111-2222-3333-0000-000000000000",
                            "create": "/11111111-2222-3333-0000-000000000000",
                            "update": "/11111111-2222-3333-0000-000000000000",
                            "delete": "/11111111-2222-3333-0000-000000000000"
                        },
                        "uuid": "11111111-2222-3333-0000-000000000000",
                        "name": "sample 1"
                    },
                    "quantity": 10,
                    "type": "RNA",
                    "unit": "mole"
                    }
                ]
            }}
        ],
        "targets": [
            { "tube": {
                "actions": {
                    "read": "/11111111-2222-3333-4444-666666666666",
                    "create": "/11111111-2222-3333-4444-666666666666",
                    "update": "/11111111-2222-3333-4444-666666666666",
                    "delete": "/11111111-2222-3333-4444-666666666666"
                },
                "uuid": "11111111-2222-3333-4444-666666666666",
                "type": null,
                "max_volume": null,
                "aliquots": [
                    { "sample": {
                        "actions": {
                            "read": "/11111111-2222-3333-0000-000000000000",
                            "create": "/11111111-2222-3333-0000-000000000000",
                            "update": "/11111111-2222-3333-0000-000000000000",
                            "delete": "/11111111-2222-3333-0000-000000000000"
                        },
                        "uuid": "11111111-2222-3333-0000-000000000000",
                        "name": "sample 1"
                    },
                    "type": "DNA",
                    "unit": "mole"
                    }
                ]
            }},
            { "tube": {
                "actions": {
                    "read": "/11111111-2222-3333-4444-777777777777",
                    "create": "/11111111-2222-3333-4444-777777777777",
                    "update": "/11111111-2222-3333-4444-777777777777",
                    "delete": "/11111111-2222-3333-4444-777777777777"
                },
                "uuid": "11111111-2222-3333-4444-777777777777",
                "type": null,
                "max_volume": null,
                "aliquots": [
                    { "sample": {
                        "actions": {
                            "read": "/11111111-2222-3333-0000-000000000000",
                            "create": "/11111111-2222-3333-0000-000000000000",
                            "update": "/11111111-2222-3333-0000-000000000000",
                            "delete": "/11111111-2222-3333-0000-000000000000"
                        },
                        "uuid": "11111111-2222-3333-0000-000000000000",
                        "name": "sample 1"
                    },
                    "type": "RNA",
                    "unit": "mole"
                    }
                ]
            }}
        ]
    },
    "transfers": [
        {
            "source_uuid": "11111111-2222-3333-4444-555555555555", 
            "target_uuid": "11111111-2222-3333-4444-666666666666",
            "amount": 5,
            "aliquot_type": "DNA"
        },
        {
            "source_uuid": "11111111-2222-3333-4444-555555555555", 
            "target_uuid": "11111111-2222-3333-4444-777777777777",
            "amount": 5,
            "aliquot_type": "RNA"
        }
    ]
}}


**Transfer the content from multiple tubes to multiple tubes**. 

* `source_uuid` source tube uuid
* `target_uuid` target tube uuid
* `amount` amount taken from source tube and transfered in target tube
* `fraction` fraction (between 0 and 1) of each aliquot from source tube to be transfered in target tube (use amount **or** fraction)
* `aliquot_type` set a new type for all aliquots in the target tube

The example below shows how to make a tubes to tubes transfer in one action:

* from tube `11111111-2222-3333-4444-555555555555` to tube `11111111-2222-3333-4444-666666666666` 
* from tube `11111111-2222-3333-4444-777777777777` to tube `11111111-2222-3333-4444-888888888888`

**Note you can replace tube uuids with spin column uuids in order to make tubes to spin columns transfer
and spin columns to tubes transfer.**
POST /actions/transfer_tubes_to_tubes
> Accept: application/json
{ "transfer_tubes_to_tubes": { 
    "transfers": [
        {
            "source_uuid": "11111111-2222-3333-4444-555555555555", 
            "target_uuid": "11111111-2222-3333-4444-666666666666",
            "amount": 5,
            "aliquot_type": "DNA"
        },
        {
            "source_uuid": "11111111-2222-3333-4444-777777777777", 
            "target_uuid": "11111111-2222-3333-4444-888888888888",
            "amount": 5,
            "aliquot_type": "RNA"
        }
    ]}
}
< 200
< Content-Type: application/json
{ "transfer_tubes_to_tubes": {
    "actions": {},
    "user": "user",
    "application": "application",
    "result": {
        "sources": [
            { "tube": {
                "actions": {
                    "read": "/11111111-2222-3333-4444-555555555555",
                    "create": "/11111111-2222-3333-4444-555555555555",
                    "update": "/11111111-2222-3333-4444-555555555555",
                    "delete": "/11111111-2222-3333-4444-555555555555"
                },
                "uuid": "11111111-2222-3333-4444-555555555555",
                "type": null,
                "max_volume": null,
                "aliquots": [
                    { "sample": {
                        "actions": {
                            "read": "/11111111-2222-3333-0000-000000000000",
                            "create": "/11111111-2222-3333-0000-000000000000",
                            "update": "/11111111-2222-3333-0000-000000000000",
                            "delete": "/11111111-2222-3333-0000-000000000000"
                        },
                        "uuid": "11111111-2222-3333-0000-000000000000",
                        "name": "sample 1"
                    },
                    "quantity": 10,
                    "type": "RNA",
                    "unit": "mole"
                    }
                ]
            }},
            { "tube": {
                "actions": {
                    "read": "/11111111-2222-3333-4444-777777777777",
                    "create": "/11111111-2222-3333-4444-777777777777",
                    "update": "/11111111-2222-3333-4444-777777777777",
                    "delete": "/11111111-2222-3333-4444-777777777777"
                },
                "uuid": "11111111-2222-3333-4444-777777777777",
                "type": null,
                "max_volume": null,
                "aliquots": [
                    { "sample": {
                        "actions": {
                            "read": "/11111111-2222-3333-0000-111111111111",
                            "create": "/11111111-2222-3333-0000-111111111111",
                            "update": "/11111111-2222-3333-0000-111111111111",
                            "delete": "/11111111-2222-3333-0000-111111111111"
                        },
                        "uuid": "11111111-2222-3333-0000-111111111111",
                        "name": "sample 2"
                    },
                    "quantity": 10,
                    "type": "RNA",
                    "unit": "mole"
                    }
                ]
            }}
        ],
        "targets": [
            { "tube": {
                "actions": {
                    "read": "/11111111-2222-3333-4444-666666666666",
                    "create": "/11111111-2222-3333-4444-666666666666",
                    "update": "/11111111-2222-3333-4444-666666666666",
                    "delete": "/11111111-2222-3333-4444-666666666666"
                },
                "uuid": "11111111-2222-3333-4444-666666666666",
                "type": null,
                "max_volume": null,
                "aliquots": [
                    { "sample": {
                        "actions": {
                            "read": "/11111111-2222-3333-0000-000000000000",
                            "create": "/11111111-2222-3333-0000-000000000000",
                            "update": "/11111111-2222-3333-0000-000000000000",
                            "delete": "/11111111-2222-3333-0000-000000000000"
                        },
                        "uuid": "11111111-2222-3333-0000-000000000000",
                        "name": "sample 1"
                    },
                    "type": "DNA",
                    "unit": "mole"
                    }
                ]
            }},   
            { "tube": {
                "actions": {
                    "read": "/11111111-2222-3333-4444-888888888888",
                    "create": "/11111111-2222-3333-4444-888888888888",
                    "update": "/11111111-2222-3333-4444-888888888888",
                    "delete": "/11111111-2222-3333-4444-888888888888"
                },
                "uuid": "11111111-2222-3333-4444-888888888888",
                "type": null,
                "max_volume": null,
                "aliquots": [
                    { "sample": {
                        "actions": {
                            "read": "/11111111-2222-3333-0000-111111111111",
                            "create": "/11111111-2222-3333-0000-111111111111",
                            "update": "/11111111-2222-3333-0000-111111111111",
                            "delete": "/11111111-2222-3333-0000-111111111111"
                        },
                        "uuid": "11111111-2222-3333-0000-111111111111",
                        "name": "sample 2"
                    },
                    "type": "RNA",
                    "unit": "mole"
                    }
                ]
            }}
        ]
    },
    "transfers": [
        {
            "source_uuid": "11111111-2222-3333-4444-555555555555", 
            "target_uuid": "11111111-2222-3333-4444-666666666666",
            "amount": 5,
            "aliquot_type": "DNA"
        },
        {
            "source_uuid": "11111111-2222-3333-4444-777777777777", 
            "target_uuid": "11111111-2222-3333-4444-888888888888",
            "amount": 5,
            "aliquot_type": "RNA"
        }
    ]
}}


--
Tube Rack Resource
--
**List actions for tube rack resource.**

* `create` creates a new tube rack via HTTP POST request
* `read` currently returns the list of actions for a tube rack resource via HTTP GET request
* `first` lists the first tube rack resources in a page browsing system
* `last` lists the last tube rack resources in a page browsing system
GET /tube_racks
> Accept: application/json
< 200
< Content-Type: application/json
{ "tube_racks": {
    "actions": {
        "create": "/tube_racks",
        "read": "/tube_racks",
        "first": "/tube_racks/page=1",
        "last": "/tube_racks/page=-1"
    }
} }


**Create a new empty tube rack.**

* `number_of_rows` number of rows in the rack
* `number_of_columns` number of columns in the rack
* `tubes` map tubes identified by their uuids to rack locations
POST /tube_racks
> Accept: application/json
{ "tube_rack": {
    "number_of_rows": 8,
    "number_of_columns": 12,
    "tubes": {}
}}
< 200
< Content-Type: application/json
{ "tube_rack": {
    "actions": {
        "create": "/11111111-2222-3333-4444-555555555555",
        "read": "/11111111-2222-3333-4444-555555555555",
        "update": "/11111111-2222-3333-4444-555555555555",
        "delete": "/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "number_of_rows": 8,
    "number_of_columns": 12,
    "tubes": {}
}}


**Create a new tube rack and add it multiple tubes.**

* `number_of_rows` number of rows in the rack
* `number_of_columns` number of columns in the rack
* `tubes` map tubes identified by their uuids to rack locations
POST /tube_racks
> Accept: application/json
{ "tube_rack": {
    "number_of_rows": 8,
    "number_of_columns": 12,
    "tubes": {
        "A1": "11111111-2222-3333-4444-111111111111",
        "E5": "11111111-2222-3333-4444-222222222222"
    }
} }
< 200
< Content-Type: application/json
{ "tube_rack": {
    "actions": {
        "create": "/11111111-2222-3333-4444-777777777777",
        "read": "/11111111-2222-3333-4444-777777777777",
        "update": "/11111111-2222-3333-4444-777777777777",
        "delete": "/11111111-2222-3333-4444-777777777777"
    },
    "uuid": "11111111-2222-3333-4444-777777777777",
    "number_of_rows": 8,
    "number_of_columns": 12,
    "tubes": {
        "A1": {
            "actions": {
                "create": "/11111111-2222-3333-4444-111111111111",
                "read": "/11111111-2222-3333-4444-111111111111",
                "update": "/11111111-2222-3333-4444-111111111111",
                "delete": "/11111111-2222-3333-4444-111111111111"
            },
            "uuid": "11111111-2222-3333-4444-111111111111",
            "type": null,
            "max_volume": null,
            "aliquots": [
                {
                    "sample": {
                        "actions": {
                            "read": "/11111111-2222-3333-0000-000000000000",
                            "create": "/11111111-2222-3333-0000-000000000000",
                            "update": "/11111111-2222-3333-0000-000000000000",
                            "delete": "/11111111-2222-3333-0000-000000000000"
                        },
                        "uuid": "11111111-2222-3333-0000-000000000000",
                        "name": "sample 1"
                    },
                    "quantity": 5,
                    "type": "NA",
                    "unit": "mole"
                }
            ]
        },
        "E5": {
            "actions": {
                "read": "/11111111-2222-3333-4444-222222222222",
                "create": "/11111111-2222-3333-4444-222222222222",
                "update": "/11111111-2222-3333-4444-222222222222",
                "delete": "/11111111-2222-3333-4444-222222222222"
            },
            "uuid": "11111111-2222-3333-4444-222222222222",
            "type": null,
            "max_volume": null,
            "aliquots": [
                {
                    "sample": {
                        "actions": {
                            "read": "/11111111-2222-3333-0000-111111111111",
                            "create": "/11111111-2222-3333-0000-111111111111",
                            "update": "/11111111-2222-3333-0000-111111111111",
                            "delete": "/11111111-2222-3333-0000-111111111111"
                        },
                        "uuid": "11111111-2222-3333-0000-111111111111",
                        "name": "sample 2"
                    },
                    "quantity": 10,
                    "type": "RNA",
                    "unit": "mole"
                }
            ]
        }
    }
}}


**Update a tube rack.**
All aliquots in each tube of the tube rack will be updated with 
`aliquot_type` and `aliquot_quantity`.

* `aliquot_type`
* `aliquot_quantity` volume (ul) if liquid, mass (mg) if solid
* `tubes` new tubes to add to the tube rack. The specified locations need to be empty.
PUT /11111111-2222-3333-4444-777777777777
> Accept: application/json
{ 
    "aliquot_type": "DNA", 
    "aliquot_quantity": 10, 
    "tubes": {
        "C2": "11111111-2222-3333-4444-999999999999"
    }
}
< 200
< Content-Type: application/json
{ "tube_rack": {
    "actions": {
        "create": "/11111111-2222-3333-4444-777777777777",
        "read": "/11111111-2222-3333-4444-777777777777",
        "update": "/11111111-2222-3333-4444-777777777777",
        "delete": "/11111111-2222-3333-4444-777777777777"
    },
    "uuid": "11111111-2222-3333-4444-777777777777",
    "number_of_rows": 8,
    "number_of_columns": 12,
    "tubes": {
        "A1": {
            "actions": {
                "create": "/11111111-2222-3333-4444-555555555555",
                "read": "/11111111-2222-3333-4444-555555555555",
                "update": "/11111111-2222-3333-4444-555555555555",
                "delete": "/11111111-2222-3333-4444-555555555555"
            },
            "uuid": "11111111-2222-3333-4444-555555555555",
            "type": null,
            "max_volume": null,
            "aliquots": [
                {
                    "sample": {
                        "actions": {
                            "read": "/11111111-2222-3333-0000-000000000000",
                            "create": "/11111111-2222-3333-0000-000000000000",
                            "update": "/11111111-2222-3333-0000-000000000000",
                            "delete": "/11111111-2222-3333-0000-000000000000"
                        },
                        "uuid": "11111111-2222-3333-0000-000000000000",
                        "name": "sample 1"
                    },
                    "quantity": 10,
                    "type": "DNA",
                    "unit": "mole"
                }
            ]
        },
        "C2": {
            "actions": {
                "create": "/11111111-2222-3333-4444-999999999999",
                "read": "/11111111-2222-3333-4444-999999999999",
                "update": "/11111111-2222-3333-4444-999999999999",
                "delete": "/11111111-2222-3333-4444-999999999999"
            },
            "uuid": "11111111-2222-3333-4444-999999999999",
            "type": null,
            "max_volume": null,
            "aliquots": [
                {
                    "sample": {
                        "actions": {
                            "read": "/11111111-2222-3333-0000-222222222222",
                            "create": "/11111111-2222-3333-0000-222222222222",
                            "update": "/11111111-2222-3333-0000-222222222222",
                            "delete": "/11111111-2222-3333-0000-222222222222"
                        },
                        "uuid": "11111111-2222-3333-0000-222222222222",
                        "name": "new sample"
                    },
                    "quantity": 10,
                    "type": "DNA",
                    "unit": "mole"
                }
            ]
        },
        "E5": {
            "actions": {
                "read": "/11111111-2222-3333-4444-666666666666",
                "create": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666"
            },
            "uuid": "11111111-2222-3333-4444-666666666666",
            "type": null,
            "max_volume": null,
            "aliquots": [
                {
                    "sample": {
                        "actions": {
                            "read": "/11111111-2222-3333-0000-111111111111",
                            "create": "/11111111-2222-3333-0000-111111111111",
                            "update": "/11111111-2222-3333-0000-111111111111",
                            "delete": "/11111111-2222-3333-0000-111111111111"
                        },
                        "uuid": "11111111-2222-3333-0000-111111111111",
                        "name": "sample 2"
                    },
                    "quantity": 10,
                    "type": "DNA",
                    "unit": "mole"
                }
            ]
        }
    }
}}


**Transfer tubes content from a source tube rack to a target tube rack according to a transfer map.**
As it is a content transfer between tubes in tube racks, targeted locations mentioned in the transfer map
need to contain tubes.

* `source_uuid` uuid of the source tube rack
* `target_uuid` uuid of the target tube rack
* `transfer_map` map locations in the source tube rack to other locations in the target tube rack

In the example below, the content of the tube in B5 in the tube rack `11111111-2222-3333-4444-555555555555` is
tranfered into the tube in C3 in the tube rack `11111111-2222-3333-4444-666666666666`.

POST /actions/tube_rack_transfer
> Accept: application/json
{ "tube_rack_transfer": {
    "source_uuid": "11111111-2222-3333-4444-555555555555",
    "target_uuid": "11111111-2222-3333-4444-666666666666",
    "transfer_map": { "B5": "C3" }
}}
< 200
< Content-Type: application/json
{ "tube_rack_transfer": {
    "actions": {},
    "user": "user",
    "application": "application",
    "result": {
        "tube_rack": {
            "actions": {
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666",
                "create": "/11111111-2222-3333-4444-666666666666"
            },
            "uuid": "11111111-2222-3333-4444-666666666666",
            "number_of_rows": 8,
            "number_of_columns": 12,
            "tubes": {
                "C3": {
                    "actions": {
                        "read": "/11111111-2222-3333-4444-888888888888",
                        "create": "/11111111-2222-3333-4444-888888888888",
                        "update": "/11111111-2222-3333-4444-888888888888",
                        "delete": "/11111111-2222-3333-4444-888888888888"
                    },
                    "uuid": "11111111-2222-3333-4444-888888888888",
                    "type": null,
                    "max_volume": null,
                    "aliquots": [ 
                        {"sample": {
                            "actions": {
                                "read": "/11111111-2222-3333-4444-000000000000",
                                "update": "/11111111-2222-3333-4444-000000000000",
                                "delete": "/11111111-2222-3333-4444-000000000000",
                                "create": "/11111111-2222-3333-4444-000000000000" 
                            },
                            "uuid": "11111111-2222-3333-4444-000000000000",
                            "name": "sample 1"
                        },
                        "quantity": 10,
                        "type": "sample",
                        "unit": "mole"
                        } 
                    ]
                }
            }        
        }
    },
    "source": {
        "tube_rack": {
            "actions": {
                "read": "/11111111-2222-3333-4444-555555555555",
                "update": "/11111111-2222-3333-4444-555555555555",
                "delete": "/11111111-2222-3333-4444-555555555555",
                "create": "/11111111-2222-3333-4444-555555555555"
            },
        "uuid": "11111111-2222-3333-4444-555555555555",
        "number_of_rows": 8,
        "number_of_columns": 12,
        "tubes": {
                "B5": {
                    "actions": {
                        "read": "/11111111-2222-3333-4444-777777777777",
                        "create": "/11111111-2222-3333-4444-777777777777",
                        "update": "/11111111-2222-3333-4444-777777777777",
                        "delete": "/11111111-2222-3333-4444-777777777777"
                    },
                    "uuid": "11111111-2222-3333-4444-777777777777",
                    "type": null,
                    "max_volume": null,
                    "aliquots": [ 
                        {"sample": {
                            "actions": {
                                "read": "/11111111-2222-3333-4444-000000000000",
                                "update": "/11111111-2222-3333-4444-000000000000",
                                "delete": "/11111111-2222-3333-4444-000000000000",
                                "create": "/11111111-2222-3333-4444-000000000000" 
                            },
                            "uuid": "11111111-2222-3333-4444-000000000000",
                            "name": "sample 1"
                        },
                        "quantity": 0,
                        "type": "sample",
                        "unit": "mole"
                        } 
                    ]
                }
            }        
        }
    },
    "target": {
        "tube_rack": {
            "actions": {
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666",
                "create": "/11111111-2222-3333-4444-666666666666"
            },
        "uuid": "11111111-2222-3333-4444-666666666666",
        "number_of_rows": 8,
        "number_of_columns": 12,
        "tubes": {
                "C3": {
                    "actions": {
                        "read": "/11111111-2222-3333-4444-888888888888",
                        "create": "/11111111-2222-3333-4444-888888888888",
                        "update": "/11111111-2222-3333-4444-888888888888",
                        "delete": "/11111111-2222-3333-4444-888888888888"
                    },
                    "uuid": "11111111-2222-3333-4444-888888888888",
                    "type": null,
                    "max_volume": null,
                    "aliquots": [ 
                        {"sample": {
                            "actions": {
                                "read": "/11111111-2222-3333-4444-000000000000",
                                "update": "/11111111-2222-3333-4444-000000000000",
                                "delete": "/11111111-2222-3333-4444-000000000000",
                                "create": "/11111111-2222-3333-4444-000000000000" 
                            },
                            "uuid": "11111111-2222-3333-4444-000000000000",
                            "name": "sample 1"
                        },
                        "quantity": 10,
                        "type": "sample",
                        "unit": "mole"
                        } 
                    ]
                }
            }
        }
    },
    "transfer_map": { "B5": "C3" }
}}


**Physically move tubes from source tube racks to target tube racks.**
It takes an array, which contains the elements of the movement.
An element has a source, source_location, target and target_location.
As it physically moves tubes, targeted locations mentioned in the movement elements need to be empty.

* `source_uuid` uuid of the source tube rack
* `source_location` the source tube location (like "A1") from move the source tube
* `target_uuid` uuid of the target tube rack
* `target_location` the target tube location (like "B1") to move the source tube

In the example below, the tube in B5 in the tube rack `11111111-2222-3333-4444-555555555555` is moved 
into the location C3 in the tube rack `11111111-2222-3333-4444-666666666666`.

POST /actions/tube_rack_move
> Accept: application/json
{ "tube_rack_move": {
    "moves": [
        {
            "source_uuid": "11111111-2222-3333-4444-555555555555",
            "source_location": "B5",
            "target_uuid": "11111111-2222-3333-4444-666666666666",
            "target_location": "C3"
        }
    ]
}}
< 200
< Content-Type: application/json
{ "tube_rack_move": {
    "actions": {},
    "user": "user",
    "application": "application",
    "result": [
        {
        "tube_rack": {
            "actions": {
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666",
                "create": "/11111111-2222-3333-4444-666666666666"
            },
            "uuid": "11111111-2222-3333-4444-666666666666",
            "number_of_rows": 8,
            "number_of_columns": 12,
            "tubes": {
                "C3": {
                    "actions": {
                        "read": "/11111111-2222-3333-4444-777777777777",
                        "create": "/11111111-2222-3333-4444-777777777777",
                        "update": "/11111111-2222-3333-4444-777777777777",
                        "delete": "/11111111-2222-3333-4444-777777777777"
                    },
                    "uuid": "11111111-2222-3333-4444-777777777777",
                    "type": null,
                    "max_volume": null,
                    "aliquots": [ 
                        {"sample": {
                            "actions": {
                                "read": "/11111111-2222-3333-4444-000000000000",
                                "update": "/11111111-2222-3333-4444-000000000000",
                                "delete": "/11111111-2222-3333-4444-000000000000",
                                "create": "/11111111-2222-3333-4444-000000000000" 
                            },
                            "uuid": "11111111-2222-3333-4444-000000000000",
                            "name": "sample 1"
                        },
                        "quantity": 10,
                        "type": "sample",
                        "unit": "mole"
                        } 
                    ]
                }
            }
        }
        }
    ],
    "moves": [
        {
            "source_uuid": "11111111-2222-3333-4444-555555555555",
            "source_location": "B5",
            "target_uuid": "11111111-2222-3333-4444-666666666666",
            "target_location": "C3"
        }
    ]
}}


--
Spin Column Resource
--
**List actions for spin column resource.**

* `create` creates a new spin column via HTTP POST request
* `read` returns the list of actions for a spin column resource via HTTP GET request
* `first` lists the first spin columns resources in a page browsing system
* `last` lists the last spin columns resources in a page browsing system
GET /spin_columns
> Accept: application/json
< 200
< Content-Type: application/json
{ "spin_columns": {
    "actions": {
        "create": "/spin_columns",
        "read": "/spin_columns",
        "first": "/spin_columns/page=1",
        "last": "/spin_columns/page=-1"
    }
} }


**Create a new empty spin column.**
POST /spin_columns
> Accept: application/json
{ "spin_column": {} }
< 200
< Content-Type: application/json
{ "spin_column": {
    "actions": {
        "read": "/11111111-2222-3333-4444-555555555555",
        "create": "/11111111-2222-3333-4444-555555555555",
        "update": "/11111111-2222-3333-4444-555555555555",
        "delete": "/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "aliquots": []
}}


--
Plate Resource
--
**List actions for tube rack resource.**

* `create` creates a new plate via HTTP POST request
* `read` returns the list of actions for a plate resource via HTTP GET request
* `first` lists the first plate resources in a page browsing system
* `last` lists the last plate resources in a page browsing system
GET /plates
> Accept: application/json
< 200
< Content-Type: application/json
{ "plates": {
    "actions": {
        "create": "/plates",
        "read": "/plates",
        "first": "/plates/page=1",
        "last": "/plates/page=-1"
    }
} }


**Create a new empty plate.**

* `number_of_rows` number of rows in the plate
* `number_of_columns` number of columns in the plate
* `type` actual type of the plate
* `wells_description` map aliquots to well locations
POST /plates
> Accept: application/json
{ "plate": {
    "number_of_rows": 8,
    "number_of_columns": 12,
    "type": "plate type",
    "wells_description": {}
}}
< 200
< Content-Type: application/json
{ "plate": {
    "actions": {
        "read": "/11111111-2222-3333-4444-555555555555",
        "update": "/11111111-2222-3333-4444-555555555555",
        "delete": "/11111111-2222-3333-4444-555555555555",
        "create": "/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "number_of_rows": 8,
    "number_of_columns": 12,
    "type": "plate type",
    "wells": { 
        "A1": [], "A2": [], "A3": [], "A4": [], "A5": [], "A6": [], "A7": [], "A8": [], "A9": [], "A10": [], "A11": [], "A12": [],
        "B1": [], "B2": [], "B3": [], "B4": [], "B5": [], "B6": [], "B7": [],"B8": [],"B9": [],"B10": [],"B11": [],"B12": [],
        "C1": [], "C2": [], "C3": [], "C4": [], "C5": [], "C6": [], "C7": [],"C8": [],"C9": [],"C10": [],"C11": [],"C12": [],
        "D1": [], "D2": [], "D3": [], "D4": [], "D5": [], "D6": [], "D7": [],"D8": [],"D9": [],"D10": [],"D11": [],"D12": [],
        "E1": [], "E2": [], "E3": [], "E4": [], "E5": [], "E6": [], "E7": [],"E8": [],"E9": [],"E10": [],"E11": [],"E12": [],
        "F1": [], "F2": [], "F3": [], "F4": [], "F5": [], "F6": [], "F7": [],"F8": [],"F9": [],"F10": [],"F11": [],"F12": [],
        "G1": [], "G2": [], "G3": [], "G4": [], "G5": [], "G6": [], "G7": [],"G8": [],"G9": [],"G10": [],"G11": [],"G12": [],
        "H1": [], "H2": [], "H3": [], "H4": [], "H5": [], "H6": [], "H7": [],"H8": [],"H9": [],"H10": [],"H11": [],"H12": []}
}}


**Create a new plate with samples.**

* `number_of_rows` number of rows in the plate
* `number_of_columns` number of columns in the plate
* `type` actual type of the plate
* `wells_description` map aliquots to well locations
POST /plates
> Accept: application/json
{ "plate": {
    "number_of_rows": 8,
    "number_of_columns": 12,
    "type": "plate type",
    "wells_description": { 
        "C5": [{ "sample": "11111111-2222-3333-4444-666666666666", "type": "DNA", "quantity": 10 }]
} } }
< 200
< Content-Type: application/json
{ "plate": {
    "actions": {
        "read": "/11111111-2222-3333-4444-555555555555",
        "update": "/11111111-2222-3333-4444-555555555555",
        "delete": "/11111111-2222-3333-4444-555555555555",
        "create": "/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "number_of_rows": 8,
    "number_of_columns": 12,
    "type": "plate type",
    "wells": { 
        "A1": [], "A2": [], "A3": [], "A4": [], "A5": [], "A6": [], "A7": [], "A8": [], "A9": [], "A10": [], "A11": [], "A12": [],
        "B1": [], "B2": [], "B3": [], "B4": [], "B5": [], "B6": [], "B7": [],"B8": [],"B9": [],"B10": [],"B11": [],"B12": [],
        "C1": [], "C2": [], "C3": [], "C4": [], 
        "C5": [ { "sample": {
            "actions": { 
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666",
                "create": "/11111111-2222-3333-4444-666666666666" 
            },
            "uuid": "11111111-2222-3333-4444-666666666666",
            "name": "sample 1"},
            "quantity": 10,
            "type": "DNA",
            "unit": "mole"
        } ],
        "C6": [],"C7": [],"C8": [],"C9": [],"C10": [],"C11": [],"C12": [],
        "D1": [], "D2": [], "D3": [], "D4": [], "D5": [], "D6": [], "D7": [],"D8": [],"D9": [],"D10": [],"D11": [],"D12": [],
        "E1": [], "E2": [], "E3": [], "E4": [], "E5": [], "E6": [], "E7": [],"E8": [],"E9": [],"E10": [],"E11": [],"E12": [],
        "F1": [], "F2": [], "F3": [], "F4": [], "F5": [], "F6": [], "F7": [],"F8": [],"F9": [],"F10": [],"F11": [],"F12": [],
        "G1": [], "G2": [], "G3": [], "G4": [], "G5": [], "G6": [], "G7": [],"G8": [],"G9": [],"G10": [],"G11": [],"G12": [],
        "H1": [], "H2": [], "H3": [], "H4": [], "H5": [], "H6": [], "H7": [],"H8": [],"H9": [],"H10": [],"H11": [],"H12": []}
}}


**Update a plate.**
All the aliquots in each well of the plate will be updated with `aliquot_type` and `aliquot_quantity`.

* `type` new type of the plate
* `aliquot_type` new type of aliquots
* `aliquot_quantity` new quantity of aliquots. volume (ul) if liquid, mass (mg) if solid.

PUT /11111111-2222-3333-4444-555555555555
> Accept: application/json
{ "type": "new plate type", "aliquot_type": "RNA", "aliquot_quantity": 10 }
< 200
< Content-Type: application/json
{ "plate": {
    "actions": {
        "read": "/11111111-2222-3333-4444-555555555555",
        "update": "/11111111-2222-3333-4444-555555555555",
        "delete": "/11111111-2222-3333-4444-555555555555",
        "create": "/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "number_of_rows": 8,
    "number_of_columns": 12,
    "type": "new plate type",
    "wells": { 
        "A1": [], "A2": [], "A3": [], "A4": [], "A5": [], "A6": [], "A7": [], "A8": [], "A9": [], "A10": [], "A11": [], "A12": [],
        "B1": [], "B2": [], "B3": [], "B4": [], "B5": [], "B6": [], "B7": [],"B8": [],"B9": [],"B10": [],"B11": [],"B12": [],
        "C1": [], "C2": [], "C3": [], "C4": [], 
        "C5": [ { "sample": {
            "actions": { 
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666",
                "create": "/11111111-2222-3333-4444-666666666666" 
            },
            "uuid": "11111111-2222-3333-4444-666666666666",
            "name": "sample 1"},
            "quantity": 10,
            "type": "RNA",
            "unit": "mole"
        } ],
        "C6": [],"C7": [],"C8": [],"C9": [],"C10": [],"C11": [],"C12": [],
        "D1": [], "D2": [], "D3": [], "D4": [], "D5": [], "D6": [], "D7": [],"D8": [],"D9": [],"D10": [],"D11": [],"D12": [],
        "E1": [], "E2": [], "E3": [], "E4": [], "E5": [], "E6": [], "E7": [],"E8": [],"E9": [],"E10": [],"E11": [],"E12": [],
        "F1": [], "F2": [], "F3": [], "F4": [], "F5": [], "F6": [], "F7": [],"F8": [],"F9": [],"F10": [],"F11": [],"F12": [],
        "G1": [], "G2": [], "G3": [], "G4": [], "G5": [], "G6": [], "G7": [],"G8": [],"G9": [],"G10": [],"G11": [],"G12": [],
        "H1": [], "H2": [], "H3": [], "H4": [], "H5": [], "H6": [], "H7": [],"H8": [],"H9": [],"H10": [],"H11": [],"H12": []}
}}


**Transfer content from a source plate to a target plate.**

* `source_uuid` uuid of the source plate
* `target_uuid` uuid of the target plate
* `transfer_map` map locations in the source plate to other locations in the target plate
* `aliquot_type` set a new type for all aliquots in the target plate

POST /actions/plate_transfer
> Accept: application/json
{ "plate_transfer": {
    "source_uuid": "11111111-2222-3333-4444-555555555555",
    "target_uuid": "11111111-2222-3333-4444-666666666666",
    "transfer_map": { "C5": "B2"},
    "aliquot_type": "new type"
}}
< 200
< Content-Type: application/json
{ "plate_transfer": {
    "actions": {},
    "user": "user",
    "application": "application",
    "result": {
        "plate": {
            "actions": {
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666",
                "create": "/11111111-2222-3333-4444-666666666666"
            },
            "uuid": "11111111-2222-3333-4444-666666666666",
            "number_of_rows": 8,
            "number_of_columns": 12,
            "type": "target plate type",
            "wells": {
                "A1": [], "A2": [], "A3": [], "A4": [], "A5": [], "A6": [], "A7": [], "A8": [], "A9": [], "A10": [], "A11": [], "A12": [], 
                "B1": [], 
                "B2": [ { 
                    "sample": {
                        "actions": { 
                            "read": "/11111111-2222-3333-4444-777777777777",
                            "update": "/11111111-2222-3333-4444-777777777777",
                            "delete": "/11111111-2222-3333-4444-777777777777",
                            "create": "/11111111-2222-3333-4444-777777777777"
                        },
                    "uuid": "11111111-2222-3333-4444-777777777777",
                    "name": "sample 1"},
                    "type": "new type",
                    "unit": "mole"
                } ], 
                "B3": [], "B4": [], "B5": [], "B6": [], "B7": [], "B8": [], "B9": [], "B10": [], "B11": [], "B12": [], 
                "C1": [], "C2": [], "C3": [], "C4": [], "C5": [], "C6": [], "C7": [], "C8": [], "C9": [], "C10": [], "C11": [], "C12": [], 
                "D1": [], "D2": [], "D3": [], "D4": [], "D5": [], "D6": [], "D7": [], "D8": [], "D9": [], "D10": [], "D11": [], "D12": [], 
                "E1": [], "E2": [], "E3": [], "E4": [], "E5": [], "E6": [], "E7": [], "E8": [], "E9": [], "E10": [], "E11": [], "E12": [], 
                "F1": [], "F2": [], "F3": [], "F4": [], "F5": [], "F6": [], "F7": [], "F8": [], "F9": [], "F10": [], "F11": [], "F12": [], 
                "G1": [], "G2": [], "G3": [], "G4": [], "G5": [], "G6": [], "G7": [], "G8": [], "G9": [], "G10": [], "G11": [], "G12": [], 
                "H1": [], "H2": [], "H3": [], "H4": [], "H5": [], "H6": [], "H7": [], "H8": [], "H9": [], "H10": [], "H11": [], "H12": []
            }    
        }
    },
    "source": {
        "plate": {
            "actions": {
                "read": "/11111111-2222-3333-4444-555555555555",
                "update": "/11111111-2222-3333-4444-555555555555",
                "delete": "/11111111-2222-3333-4444-555555555555",
                "create": "/11111111-2222-3333-4444-555555555555"
            },
        "uuid": "11111111-2222-3333-4444-555555555555",
        "number_of_rows": 8,
        "number_of_columns": 12,
        "type": "source plate type",
        "wells": {
                "A1": [], "A2": [], "A3": [], "A4": [], "A5": [], "A6": [], "A7": [], "A8": [], "A9": [], "A10": [], "A11": [], "A12": [], 
                "B1": [], "B2": [], "B3": [], "B4": [], "B5": [], "B6": [], "B7": [], "B8": [], "B9": [], "B10": [], "B11": [], "B12": [], 
                "C1": [], "C2": [], "C3": [], "C4": [], 
                "C5": [ { 
                    "sample": {
                        "actions": { 
                            "read": "/11111111-2222-3333-4444-777777777777",
                            "update": "/11111111-2222-3333-4444-777777777777",
                            "delete": "/11111111-2222-3333-4444-777777777777",
                            "create": "/11111111-2222-3333-4444-777777777777"
                        },
                    "uuid": "11111111-2222-3333-4444-777777777777",
                    "name": "sample 1"},
                    "quantity": 10,
                    "type": "new type",
                    "unit": "mole"
                } ], 
                "C6": [], "C7": [], "C8": [], "C9": [], "C10": [], "C11": [], "C12": [], 
                "D1": [], "D2": [], "D3": [], "D4": [], "D5": [], "D6": [], "D7": [], "D8": [], "D9": [], "D10": [], "D11": [], "D12": [], 
                "E1": [], "E2": [], "E3": [], "E4": [], "E5": [], "E6": [], "E7": [], "E8": [], "E9": [], "E10": [], "E11": [], "E12": [], 
                "F1": [], "F2": [], "F3": [], "F4": [], "F5": [], "F6": [], "F7": [], "F8": [], "F9": [], "F10": [], "F11": [], "F12": [], 
                "G1": [], "G2": [], "G3": [], "G4": [], "G5": [], "G6": [], "G7": [], "G8": [], "G9": [], "G10": [], "G11": [], "G12": [], 
                "H1": [], "H2": [], "H3": [], "H4": [], "H5": [], "H6": [], "H7": [], "H8": [], "H9": [], "H10": [], "H11": [], "H12": []
            }         
        }
    },
    "target": {
        "plate": {
            "actions": {
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666",
                "create": "/11111111-2222-3333-4444-666666666666"
            },
        "uuid": "11111111-2222-3333-4444-666666666666",
        "number_of_rows": 8,
        "number_of_columns": 12,
        "type": "target plate type",
        "wells": {
                "A1": [], "A2": [], "A3": [], "A4": [], "A5": [], "A6": [], "A7": [], "A8": [], "A9": [], "A10": [], "A11": [], "A12": [], 
                "B1": [], 
                "B2": [ { 
                    "sample": {
                        "actions": { 
                            "read": "/11111111-2222-3333-4444-777777777777",
                            "update": "/11111111-2222-3333-4444-777777777777",
                            "delete": "/11111111-2222-3333-4444-777777777777",
                            "create": "/11111111-2222-3333-4444-777777777777"
                        },
                    "uuid": "11111111-2222-3333-4444-777777777777",
                    "name": "sample 1"},
                    "type": "new type",
                    "unit": "mole"
                } ], 
                "B3": [], "B4": [], "B5": [], "B6": [], "B7": [], "B8": [], "B9": [], "B10": [], "B11": [], "B12": [], 
                "C1": [], "C2": [], "C3": [], "C4": [], "C5": [], "C6": [], "C7": [], "C8": [], "C9": [], "C10": [], "C11": [], "C12": [], 
                "D1": [], "D2": [], "D3": [], "D4": [], "D5": [], "D6": [], "D7": [], "D8": [], "D9": [], "D10": [], "D11": [], "D12": [], 
                "E1": [], "E2": [], "E3": [], "E4": [], "E5": [], "E6": [], "E7": [], "E8": [], "E9": [], "E10": [], "E11": [], "E12": [], 
                "F1": [], "F2": [], "F3": [], "F4": [], "F5": [], "F6": [], "F7": [], "F8": [], "F9": [], "F10": [], "F11": [], "F12": [], 
                "G1": [], "G2": [], "G3": [], "G4": [], "G5": [], "G6": [], "G7": [], "G8": [], "G9": [], "G10": [], "G11": [], "G12": [], 
                "H1": [], "H2": [], "H3": [], "H4": [], "H5": [], "H6": [], "H7": [], "H8": [], "H9": [], "H10": [], "H11": [], "H12": []
            }
        }
    },
    "transfer_map": { "C5": "B2" },
    "aliquot_type": "new type"
}}


**Transfer plates to plates with solvent.**

This action transfers the given fraction of aliquot from plate-like asset(s)
to plate-like asset(s) and it changes the aliquot type to the given one.
A plate-like asset can be a plate, gel or a tube rack.

The action takes an array, which contains transfer elements.

* `source_uuid` uuid of the source plate
* `source_location` is the well/window/tube location (like "A1")
from transfer the aliquots
* `target_uuid` uuid of the target plate
* `target_location` is the well/window/tube location (like "A1")
to transfer the aliquots.
* `fractionmount` Amount is an amount of an aliquot to transfer.
Fraction is the fraction of an aliquot to transfer.
You should give the fraction OR the amount of the transfer, not both of them.
* `aliquot_type` set a new type for all aliquots in the target plate-like asset

POST /actions/transfer_plates_to_plates
> Accept: application/json
{ "transfer_plates_to_plates": {
    "transfers": [
        { "source_uuid": "11111111-2222-3333-1111-000000000000",
          "source_location": "A1",
          "target_uuid": "11111111-2222-3333-1111-222222222222",
          "target_location": "B2",
          "fraction": 0.4,
          "aliquot_type": "DNA"
        },
        { "source_uuid": "11111111-2222-3333-1111-111111111111",
          "source_location": "C3",
          "target_uuid": "11111111-2222-3333-1111-333333333333",
          "target_location": "D4",
          "fraction": 0.4,
          "aliquot_type": "RNA"
        }
    ]
}}
< 200
< Content-Type: application/json
{ "transfer_plates_to_plates": {
    "actions": {
    },
    "user": "user",
    "application": "application",
    "result": {
        "sources": [ {
            "plate": {
                "actions": {
                    "read": "http://example.org/11111111-2222-3333-1111-000000000000",
                     "create": "http://example.org/11111111-2222-3333-1111-000000000000",
                     "update": "http://example.org/11111111-2222-3333-1111-000000000000",
                     "delete": "http://example.org/11111111-2222-3333-1111-000000000000"
                },
                "uuid": "11111111-2222-3333-1111-000000000000",
                "type": "source plate type",
                "number_of_rows": 8,
                "number_of_columns": 12,
                "wells": {
                    "A1": [ {
                        "sample": {
                            "actions": {
                                "read": "http://example.org/11111111-2222-3333-4444-555555555555",
                                "create": "http://example.org/11111111-2222-3333-4444-555555555555",
                                "update": "http://example.org/11111111-2222-3333-4444-555555555555",
                                "delete": "http://example.org/11111111-2222-3333-4444-555555555555"
                            },
                            "uuid": "11111111-2222-3333-4444-555555555555",
                            "name": "sample for A1"
                        },
                        "quantity": 60.0,
                        "type": "sample",
                        "unit": "mole"
                    },
                    {
                        "quantity": 60.0,
                        "type": "solvent",
                        "unit": "ul"
                    }
                    ],
                    "A2": [],
                    "A3": [],
                    "A4": [],
                    "A5": [],
                    "A6": [],
                    "A7": [],
                    "A8": [],
                    "A9": [],
                    "A10": [],
                    "A11": [],
                    "A12": [],
                    "B1": [],
                    "B2": [],
                    "B3": [],
                    "B4": [],
                    "B5": [],
                    "B6": [],
                    "B7": [],
                    "B8": [],
                    "B9": [],
                    "B10": [],
                    "B11": [],
                    "B12": [],
                    "C1": [],
                    "C2": [],
                    "C3": [],
                    "C4": [],
                    "C5": [],
                    "C6": [],
                    "C7": [],
                    "C8": [],
                    "C9": [],
                    "C10": [],
                    "C11": [],
                    "C12": [],
                    "D1": [],
                    "D2": [],
                    "D3": [],
                    "D4": [],
                    "D5": [],
                    "D6": [],
                    "D7": [],
                    "D8": [],
                    "D9": [],
                    "D10": [],
                    "D11": [],
                    "D12": [],
                    "E1": [],
                    "E2": [],
                    "E3": [],
                    "E4": [],
                    "E5": [],
                    "E6": [],
                    "E7": [],
                    "E8": [],
                    "E9": [],
                    "E10": [],
                    "E11": [],
                    "E12": [],
                    "F1": [],
                    "F2": [],
                    "F3": [],
                    "F4": [],
                    "F5": [],
                    "F6": [],
                    "F7": [],
                    "F8": [],
                    "F9": [],
                    "F10": [],
                    "F11": [],
                    "F12": [],
                    "G1": [],
                    "G2": [],
                    "G3": [],
                    "G4": [],
                    "G5": [],
                    "G6": [],
                    "G7": [],
                    "G8": [],
                    "G9": [],
                    "G10": [],
                    "G11": [],
                    "G12": [],
                    "H1": [],
                    "H2": [],
                    "H3": [],
                    "H4": [],
                    "H5": [],
                    "H6": [],
                    "H7": [],
                    "H8": [],
                    "H9": [],
                    "H10": [],
                    "H11": [],
                    "H12": []
                }
            }
        },
        {
            "plate": {
                "actions": {
                    "read": "http://example.org/11111111-2222-3333-1111-111111111111",
                    "create": "http://example.org/11111111-2222-3333-1111-111111111111",
                    "update": "http://example.org/11111111-2222-3333-1111-111111111111",
                    "delete": "http://example.org/11111111-2222-3333-1111-111111111111"
                },
                "uuid": "11111111-2222-3333-1111-111111111111",
                "type": "source plate type",
                "number_of_rows": 8,
                "number_of_columns": 12,
                "wells": {
                    "A1": [],
                    "A2": [],
                    "A3": [],
                    "A4": [],
                    "A5": [],
                    "A6": [],
                    "A7": [],
                    "A8": [],
                    "A9": [],
                    "A10": [],
                    "A11": [],
                    "A12": [],
                    "B1": [],
                    "B2": [],
                    "B3": [],
                    "B4": [],
                    "B5": [],
                    "B6": [],
                    "B7": [],
                    "B8": [],
                    "B9": [],
                    "B10": [],
                    "B11": [],
                    "B12": [],
                    "C1": [],
                    "C2": [],
                    "C3": [ {
                        "sample": {
                            "actions": {
                                "read": "http://example.org/11111111-2222-3333-4444-666666666666",
                                "create": "http://example.org/11111111-2222-3333-4444-666666666666",
                                "update": "http://example.org/11111111-2222-3333-4444-666666666666",
                                "delete": "http://example.org/11111111-2222-3333-4444-666666666666"
                            },
                            "uuid": "11111111-2222-3333-4444-666666666666",
                            "name": "sample for C3"
                        },
                        "quantity": 60.0,
                        "type": "sample",
                        "unit": "mole"
                    },
                    {
                        "quantity": 60.0,
                        "type": "solvent",
                        "unit": "ul"
                    } ],
                    "C4": [],
                    "C5": [],
                    "C6": [],
                    "C7": [],
                    "C8": [],
                    "C9": [],
                    "C10": [],
                    "C11": [],
                    "C12": [],
                    "D1": [],
                    "D2": [],
                    "D3": [],
                    "D4": [],
                    "D5": [],
                    "D6": [],
                    "D7": [],
                    "D8": [],
                    "D9": [],
                    "D10": [],
                    "D11": [],
                    "D12": [],
                    "E1": [],
                    "E2": [],
                    "E3": [],
                    "E4": [],
                    "E5": [],
                    "E6": [],
                    "E7": [],
                    "E8": [],
                    "E9": [],
                    "E10": [],
                    "E11": [],
                    "E12": [],
                    "F1": [],
                    "F2": [],
                    "F3": [],
                    "F4": [],
                    "F5": [],
                    "F6": [],
                    "F7": [],
                    "F8": [],
                    "F9": [],
                    "F10": [],
                    "F11": [],
                    "F12": [],
                    "G1": [],
                    "G2": [],
                    "G3": [],
                    "G4": [],
                    "G5": [],
                    "G6": [],
                    "G7": [],
                    "G8": [],
                    "G9": [],
                    "G10": [],
                    "G11": [],
                    "G12": [],
                    "H1": [],
                    "H2": [],
                    "H3": [],
                    "H4": [],
                    "H5": [],
                    "H6": [],
                    "H7": [],
                    "H8": [],
                    "H9": [],
                    "H10": [],
                    "H11": [],
                    "H12": []
                }
            }
        }],
        "targets": [ {
            "plate": {
                "actions": {
                    "read": "http://example.org/11111111-2222-3333-1111-222222222222",
                    "create": "http://example.org/11111111-2222-3333-1111-222222222222",
                    "update": "http://example.org/11111111-2222-3333-1111-222222222222",
                    "delete": "http://example.org/11111111-2222-3333-1111-222222222222"
                },
                "uuid": "11111111-2222-3333-1111-222222222222",
                "type": "target plate type",
                "number_of_rows": 8,
                "number_of_columns": 12,
                "wells": {
                    "A1": [],
                    "A2": [],
                    "A3": [],
                    "A4": [],
                    "A5": [],
                    "A6": [],
                    "A7": [],
                    "A8": [],
                    "A9": [],
                    "A10": [],
                    "A11": [],
                    "A12": [],
                    "B1": [],
                    "B2": [ {
                        "sample": {
                            "actions": {
                                "read": "http://example.org/11111111-2222-3333-4444-555555555555",
                                "create": "http://example.org/11111111-2222-3333-4444-555555555555",
                                "update": "http://example.org/11111111-2222-3333-4444-555555555555",
                                "delete": "http://example.org/11111111-2222-3333-4444-555555555555"
                            },
                            "uuid": "11111111-2222-3333-4444-555555555555",
                            "name": "sample for A1"
                        },
                        "quantity": 40.0,
                        "type": "DNA",
                        "unit": "mole"
                    },
                    {
                        "quantity": 40.0,
                        "type": "DNA",
                        "unit": "mole"
                    } ],
                    "B3": [],
                    "B4": [],
                    "B5": [],
                    "B6": [],
                    "B7": [],
                    "B8": [],
                    "B9": [],
                    "B10": [],
                    "B11": [],
                    "B12": [],
                    "C1": [],
                    "C2": [],
                    "C3": [],
                    "C4": [],
                    "C5": [],
                    "C6": [],
                    "C7": [],
                    "C8": [],
                    "C9": [],
                    "C10": [],
                    "C11": [],
                    "C12": [],
                    "D1": [],
                    "D2": [],
                    "D3": [],
                    "D4": [],
                    "D5": [],
                    "D6": [],
                    "D7": [],
                    "D8": [],
                    "D9": [],
                    "D10": [],
                    "D11": [],
                    "D12": [],
                    "E1": [],
                    "E2": [],
                    "E3": [],
                    "E4": [],
                    "E5": [],
                    "E6": [],
                    "E7": [],
                    "E8": [],
                    "E9": [],
                    "E10": [],
                    "E11": [],
                    "E12": [],
                    "F1": [],
                    "F2": [],
                    "F3": [],
                    "F4": [],
                    "F5": [],
                    "F6": [],
                    "F7": [],
                    "F8": [],
                    "F9": [],
                    "F10": [],
                    "F11": [],
                    "F12": [],
                    "G1": [],
                    "G2": [],
                    "G3": [],
                    "G4": [],
                    "G5": [],
                    "G6": [],
                    "G7": [],
                    "G8": [],
                    "G9": [],
                    "G10": [],
                    "G11": [],
                    "G12": [],
                    "H1": [],
                    "H2": [],
                    "H3": [],
                    "H4": [],
                    "H5": [],
                    "H6": [],
                    "H7": [],
                    "H8": [],
                    "H9": [],
                    "H10": [],
                    "H11": [],
                    "H12": []
                }
            }
        },
        {
            "plate": {
                "actions": {
                    "read": "http://example.org/11111111-2222-3333-1111-333333333333",
                    "create": "http://example.org/11111111-2222-3333-1111-333333333333",
                    "update": "http://example.org/11111111-2222-3333-1111-333333333333",
                    "delete": "http://example.org/11111111-2222-3333-1111-333333333333"
                },
                "uuid": "11111111-2222-3333-1111-333333333333",
                "type": "target plate type",
                "number_of_rows": 8,
                "number_of_columns": 12,
                "wells": {
                    "A1": [],
                    "A2": [],
                    "A3": [],
                    "A4": [],
                    "A5": [],
                    "A6": [],
                    "A7": [],
                    "A8": [],
                    "A9": [],
                    "A10": [],
                    "A11": [],
                    "A12": [],
                    "B1": [],
                    "B2": [],
                    "B3": [],
                    "B4": [],
                    "B5": [],
                    "B6": [],
                    "B7": [],
                    "B8": [],
                    "B9": [],
                    "B10": [],
                    "B11": [],
                    "B12": [],
                    "C1": [],
                    "C2": [],
                    "C3": [],
                    "C4": [],
                    "C5": [],
                    "C6": [],
                    "C7": [],
                    "C8": [],
                    "C9": [],
                    "C10": [],
                    "C11": [],
                    "C12": [],
                    "D1": [],
                    "D2": [],
                    "D3": [],
                    "D4": [ {
                        "sample": {
                            "actions": {
                                "read": "http://example.org/11111111-2222-3333-4444-666666666666",
                                "create": "http://example.org/11111111-2222-3333-4444-666666666666",
                                "update": "http://example.org/11111111-2222-3333-4444-666666666666",
                                "delete": "http://example.org/11111111-2222-3333-4444-666666666666"
                            },
                            "uuid": "11111111-2222-3333-4444-666666666666",
                            "name": "sample for C3"
                        },
                        "type": "RNA",
                        "quantity": 40.0,
                        "unit": "mole"
                    },
                    {
                        "quantity": 40.0,
                        "type": "RNA",
                        "unit": "mole"
                    }],
                    "D5": [],
                    "D6": [],
                    "D7": [],
                    "D8": [],
                    "D9": [],
                    "D10": [],
                    "D11": [],
                    "D12": [],
                    "E1": [],
                    "E2": [],
                    "E3": [],
                    "E4": [],
                    "E5": [],
                    "E6": [],
                    "E7": [],
                    "E8": [],
                    "E9": [],
                    "E10": [],
                    "E11": [],
                    "E12": [],
                    "F1": [],
                    "F2": [],
                    "F3": [],
                    "F4": [],
                    "F5": [],
                    "F6": [],
                    "F7": [],
                    "F8": [],
                    "F9": [],
                    "F10": [],
                    "F11": [],
                    "F12": [],
                    "G1": [],
                    "G2": [],
                    "G3": [],
                    "G4": [],
                    "G5": [],
                    "G6": [],
                    "G7": [],
                    "G8": [],
                    "G9": [],
                    "G10": [],
                    "G11": [],
                    "G12": [],
                    "H1": [],
                    "H2": [],
                    "H3": [],
                    "H4": [],
                    "H5": [],
                    "H6": [],
                    "H7": [],
                    "H8": [],
                    "H9": [],
                    "H10": [],
                    "H11": [],
                    "H12": []
                }
            }
        }]
    },
    "transfers": [ {
        "source_uuid": "11111111-2222-3333-1111-000000000000",
        "source_location": "A1",
        "target_uuid": "11111111-2222-3333-1111-222222222222",
        "target_location": "B2",
        "fraction": 0.4,
        "aliquot_type": "DNA"
        },
        {
        "source_uuid": "11111111-2222-3333-1111-111111111111",
        "source_location": "C3",
        "target_uuid": "11111111-2222-3333-1111-333333333333",
        "target_location": "D4",
        "fraction": 0.4,
        "aliquot_type": "RNA"
        }
    ] }
}


**Transfer plates to plates without solvent.**

This action transfers the given fraction of aliquot from plate-like asset(s)
to plate-like asset(s) and it changes the aliquot type to the given one.
A plate-like asset can be a plate, gel or a tube rack.

The action takes an array, which contains transfer elements.

* `source_uuid` uuid of the source plate
* `source_location` is the well/window/tube location (like "A1")
from transfer the aliquots
* `target_uuid` uuid of the target plate
* `target_location` is the well/window/tube location (like "A1")
to transfer the aliquots.
* `fractionmount` Amount is an amount of an aliquot to transfer.
Fraction is the fraction of an aliquot to transfer.
You should give the fraction OR the amount of the transfer, not both of them.
* `aliquot_type` set a new type for all aliquots in the target plate-like asset

POST /actions/transfer_plates_to_plates
> Accept: application/json
{ "transfer_plates_to_plates": {
    "transfers": [
        { "source_uuid": "11111111-2222-3333-1111-000000000000",
          "source_location": "A1",
          "target_uuid": "11111111-2222-3333-1111-222222222222",
          "target_location": "B2",
          "fraction": 0.4,
          "aliquot_type": "DNA"
        },
        { "source_uuid": "11111111-2222-3333-1111-111111111111",
          "source_location": "C3",
          "target_uuid": "11111111-2222-3333-1111-333333333333",
          "target_location": "D4",
          "fraction": 0.4,
          "aliquot_type": "RNA"
        }
    ]
}}
< 200
< Content-Type: application/json
{ "transfer_plates_to_plates": {
    "actions": {
    },
    "user": "user",
    "application": "application",
    "result": {
        "sources": [ {
            "plate": {
                "actions": {
                    "read": "http://example.org/11111111-2222-3333-1111-000000000000",
                     "create": "http://example.org/11111111-2222-3333-1111-000000000000",
                     "update": "http://example.org/11111111-2222-3333-1111-000000000000",
                     "delete": "http://example.org/11111111-2222-3333-1111-000000000000"
                },
                "uuid": "11111111-2222-3333-1111-000000000000",
                "type": "source plate type",
                "number_of_rows": 8,
                "number_of_columns": 12,
                "wells": {
                    "A1": [ {
                        "sample": {
                            "actions": {
                                "read": "http://example.org/11111111-2222-3333-4444-555555555555",
                                "create": "http://example.org/11111111-2222-3333-4444-555555555555",
                                "update": "http://example.org/11111111-2222-3333-4444-555555555555",
                                "delete": "http://example.org/11111111-2222-3333-4444-555555555555"
                            },
                            "uuid": "11111111-2222-3333-4444-555555555555",
                            "name": "sample for A1"
                        },
                        "quantity": 100,
                        "type": "sample",
                        "unit": "mole"
                    } ],
                    "A2": [],
                    "A3": [],
                    "A4": [],
                    "A5": [],
                    "A6": [],
                    "A7": [],
                    "A8": [],
                    "A9": [],
                    "A10": [],
                    "A11": [],
                    "A12": [],
                    "B1": [],
                    "B2": [],
                    "B3": [],
                    "B4": [],
                    "B5": [],
                    "B6": [],
                    "B7": [],
                    "B8": [],
                    "B9": [],
                    "B10": [],
                    "B11": [],
                    "B12": [],
                    "C1": [],
                    "C2": [],
                    "C3": [],
                    "C4": [],
                    "C5": [],
                    "C6": [],
                    "C7": [],
                    "C8": [],
                    "C9": [],
                    "C10": [],
                    "C11": [],
                    "C12": [],
                    "D1": [],
                    "D2": [],
                    "D3": [],
                    "D4": [],
                    "D5": [],
                    "D6": [],
                    "D7": [],
                    "D8": [],
                    "D9": [],
                    "D10": [],
                    "D11": [],
                    "D12": [],
                    "E1": [],
                    "E2": [],
                    "E3": [],
                    "E4": [],
                    "E5": [],
                    "E6": [],
                    "E7": [],
                    "E8": [],
                    "E9": [],
                    "E10": [],
                    "E11": [],
                    "E12": [],
                    "F1": [],
                    "F2": [],
                    "F3": [],
                    "F4": [],
                    "F5": [],
                    "F6": [],
                    "F7": [],
                    "F8": [],
                    "F9": [],
                    "F10": [],
                    "F11": [],
                    "F12": [],
                    "G1": [],
                    "G2": [],
                    "G3": [],
                    "G4": [],
                    "G5": [],
                    "G6": [],
                    "G7": [],
                    "G8": [],
                    "G9": [],
                    "G10": [],
                    "G11": [],
                    "G12": [],
                    "H1": [],
                    "H2": [],
                    "H3": [],
                    "H4": [],
                    "H5": [],
                    "H6": [],
                    "H7": [],
                    "H8": [],
                    "H9": [],
                    "H10": [],
                    "H11": [],
                    "H12": []
                }
            }
        },
        {
            "plate": {
                "actions": {
                    "read": "http://example.org/11111111-2222-3333-1111-111111111111",
                    "create": "http://example.org/11111111-2222-3333-1111-111111111111",
                    "update": "http://example.org/11111111-2222-3333-1111-111111111111",
                    "delete": "http://example.org/11111111-2222-3333-1111-111111111111"
                },
                "uuid": "11111111-2222-3333-1111-111111111111",
                "type": "source plate type",
                "number_of_rows": 8,
                "number_of_columns": 12,
                "wells": {
                    "A1": [],
                    "A2": [],
                    "A3": [],
                    "A4": [],
                    "A5": [],
                    "A6": [],
                    "A7": [],
                    "A8": [],
                    "A9": [],
                    "A10": [],
                    "A11": [],
                    "A12": [],
                    "B1": [],
                    "B2": [],
                    "B3": [],
                    "B4": [],
                    "B5": [],
                    "B6": [],
                    "B7": [],
                    "B8": [],
                    "B9": [],
                    "B10": [],
                    "B11": [],
                    "B12": [],
                    "C1": [],
                    "C2": [],
                    "C3": [ {
                        "sample": {
                            "actions": {
                                "read": "http://example.org/11111111-2222-3333-4444-666666666666",
                                "create": "http://example.org/11111111-2222-3333-4444-666666666666",
                                "update": "http://example.org/11111111-2222-3333-4444-666666666666",
                                "delete": "http://example.org/11111111-2222-3333-4444-666666666666"
                            },
                            "uuid": "11111111-2222-3333-4444-666666666666",
                            "name": "sample for C3"
                        },
                        "quantity": 100,
                        "type": "sample",
                        "unit": "mole"
                    } ],
                    "C4": [],
                    "C5": [],
                    "C6": [],
                    "C7": [],
                    "C8": [],
                    "C9": [],
                    "C10": [],
                    "C11": [],
                    "C12": [],
                    "D1": [],
                    "D2": [],
                    "D3": [],
                    "D4": [],
                    "D5": [],
                    "D6": [],
                    "D7": [],
                    "D8": [],
                    "D9": [],
                    "D10": [],
                    "D11": [],
                    "D12": [],
                    "E1": [],
                    "E2": [],
                    "E3": [],
                    "E4": [],
                    "E5": [],
                    "E6": [],
                    "E7": [],
                    "E8": [],
                    "E9": [],
                    "E10": [],
                    "E11": [],
                    "E12": [],
                    "F1": [],
                    "F2": [],
                    "F3": [],
                    "F4": [],
                    "F5": [],
                    "F6": [],
                    "F7": [],
                    "F8": [],
                    "F9": [],
                    "F10": [],
                    "F11": [],
                    "F12": [],
                    "G1": [],
                    "G2": [],
                    "G3": [],
                    "G4": [],
                    "G5": [],
                    "G6": [],
                    "G7": [],
                    "G8": [],
                    "G9": [],
                    "G10": [],
                    "G11": [],
                    "G12": [],
                    "H1": [],
                    "H2": [],
                    "H3": [],
                    "H4": [],
                    "H5": [],
                    "H6": [],
                    "H7": [],
                    "H8": [],
                    "H9": [],
                    "H10": [],
                    "H11": [],
                    "H12": []
                }
            }
        }],
        "targets": [ {
            "plate": {
                "actions": {
                    "read": "http://example.org/11111111-2222-3333-1111-222222222222",
                    "create": "http://example.org/11111111-2222-3333-1111-222222222222",
                    "update": "http://example.org/11111111-2222-3333-1111-222222222222",
                    "delete": "http://example.org/11111111-2222-3333-1111-222222222222"
                },
                "uuid": "11111111-2222-3333-1111-222222222222",
                "type": "target plate type",
                "number_of_rows": 8,
                "number_of_columns": 12,
                "wells": {
                    "A1": [],
                    "A2": [],
                    "A3": [],
                    "A4": [],
                    "A5": [],
                    "A6": [],
                    "A7": [],
                    "A8": [],
                    "A9": [],
                    "A10": [],
                    "A11": [],
                    "A12": [],
                    "B1": [],
                    "B2": [ {
                        "sample": {
                            "actions": {
                                "read": "http://example.org/11111111-2222-3333-4444-555555555555",
                                "create": "http://example.org/11111111-2222-3333-4444-555555555555",
                                "update": "http://example.org/11111111-2222-3333-4444-555555555555",
                                "delete": "http://example.org/11111111-2222-3333-4444-555555555555"
                            },
                            "uuid": "11111111-2222-3333-4444-555555555555",
                            "name": "sample for A1"
                        },
                        "type": "DNA",
                        "unit": "mole"
                    } ],
                    "B3": [],
                    "B4": [],
                    "B5": [],
                    "B6": [],
                    "B7": [],
                    "B8": [],
                    "B9": [],
                    "B10": [],
                    "B11": [],
                    "B12": [],
                    "C1": [],
                    "C2": [],
                    "C3": [],
                    "C4": [],
                    "C5": [],
                    "C6": [],
                    "C7": [],
                    "C8": [],
                    "C9": [],
                    "C10": [],
                    "C11": [],
                    "C12": [],
                    "D1": [],
                    "D2": [],
                    "D3": [],
                    "D4": [],
                    "D5": [],
                    "D6": [],
                    "D7": [],
                    "D8": [],
                    "D9": [],
                    "D10": [],
                    "D11": [],
                    "D12": [],
                    "E1": [],
                    "E2": [],
                    "E3": [],
                    "E4": [],
                    "E5": [],
                    "E6": [],
                    "E7": [],
                    "E8": [],
                    "E9": [],
                    "E10": [],
                    "E11": [],
                    "E12": [],
                    "F1": [],
                    "F2": [],
                    "F3": [],
                    "F4": [],
                    "F5": [],
                    "F6": [],
                    "F7": [],
                    "F8": [],
                    "F9": [],
                    "F10": [],
                    "F11": [],
                    "F12": [],
                    "G1": [],
                    "G2": [],
                    "G3": [],
                    "G4": [],
                    "G5": [],
                    "G6": [],
                    "G7": [],
                    "G8": [],
                    "G9": [],
                    "G10": [],
                    "G11": [],
                    "G12": [],
                    "H1": [],
                    "H2": [],
                    "H3": [],
                    "H4": [],
                    "H5": [],
                    "H6": [],
                    "H7": [],
                    "H8": [],
                    "H9": [],
                    "H10": [],
                    "H11": [],
                    "H12": []
                }
            }
        },
        {
            "plate": {
                "actions": {
                    "read": "http://example.org/11111111-2222-3333-1111-333333333333",
                    "create": "http://example.org/11111111-2222-3333-1111-333333333333",
                    "update": "http://example.org/11111111-2222-3333-1111-333333333333",
                    "delete": "http://example.org/11111111-2222-3333-1111-333333333333"
                },
                "uuid": "11111111-2222-3333-1111-333333333333",
                "type": "target plate type",
                "number_of_rows": 8,
                "number_of_columns": 12,
                "wells": {
                    "A1": [],
                    "A2": [],
                    "A3": [],
                    "A4": [],
                    "A5": [],
                    "A6": [],
                    "A7": [],
                    "A8": [],
                    "A9": [],
                    "A10": [],
                    "A11": [],
                    "A12": [],
                    "B1": [],
                    "B2": [],
                    "B3": [],
                    "B4": [],
                    "B5": [],
                    "B6": [],
                    "B7": [],
                    "B8": [],
                    "B9": [],
                    "B10": [],
                    "B11": [],
                    "B12": [],
                    "C1": [],
                    "C2": [],
                    "C3": [],
                    "C4": [],
                    "C5": [],
                    "C6": [],
                    "C7": [],
                    "C8": [],
                    "C9": [],
                    "C10": [],
                    "C11": [],
                    "C12": [],
                    "D1": [],
                    "D2": [],
                    "D3": [],
                    "D4": [ {
                        "sample": {
                            "actions": {
                                "read": "http://example.org/11111111-2222-3333-4444-666666666666",
                                "create": "http://example.org/11111111-2222-3333-4444-666666666666",
                                "update": "http://example.org/11111111-2222-3333-4444-666666666666",
                                "delete": "http://example.org/11111111-2222-3333-4444-666666666666"
                            },
                            "uuid": "11111111-2222-3333-4444-666666666666",
                            "name": "sample for C3"
                        },
                        "type": "RNA",
                        "unit": "mole"
                    } ],
                    "D5": [],
                    "D6": [],
                    "D7": [],
                    "D8": [],
                    "D9": [],
                    "D10": [],
                    "D11": [],
                    "D12": [],
                    "E1": [],
                    "E2": [],
                    "E3": [],
                    "E4": [],
                    "E5": [],
                    "E6": [],
                    "E7": [],
                    "E8": [],
                    "E9": [],
                    "E10": [],
                    "E11": [],
                    "E12": [],
                    "F1": [],
                    "F2": [],
                    "F3": [],
                    "F4": [],
                    "F5": [],
                    "F6": [],
                    "F7": [],
                    "F8": [],
                    "F9": [],
                    "F10": [],
                    "F11": [],
                    "F12": [],
                    "G1": [],
                    "G2": [],
                    "G3": [],
                    "G4": [],
                    "G5": [],
                    "G6": [],
                    "G7": [],
                    "G8": [],
                    "G9": [],
                    "G10": [],
                    "G11": [],
                    "G12": [],
                    "H1": [],
                    "H2": [],
                    "H3": [],
                    "H4": [],
                    "H5": [],
                    "H6": [],
                    "H7": [],
                    "H8": [],
                    "H9": [],
                    "H10": [],
                    "H11": [],
                    "H12": []
                }
            }
        }]
    },
    "transfers": [ {
        "source_uuid": "11111111-2222-3333-1111-000000000000",
        "source_location": "A1",
        "target_uuid": "11111111-2222-3333-1111-222222222222",
        "target_location": "B2",
        "fraction": 0.4,
        "aliquot_type": "DNA"
        },
        {
        "source_uuid": "11111111-2222-3333-1111-111111111111",
        "source_location": "C3",
        "target_uuid": "11111111-2222-3333-1111-333333333333",
        "target_location": "D4",
        "fraction": 0.4,
        "aliquot_type": "RNA"
        }
    ] }
}


--
Gel Plate Resource
--
**List actions for gel resource.**

* `create` creates a new gel plate via HTTP POST request
* `read` returns the list of actions for a gel plate resource via HTTP GET request
* `first` lists the first gel plates resources in a page browsing system
* `last` lists the last gel plates resources in a page browsing system
GET /gels
> Accept: application/json
< 200
< Content-Type: application/json
{ "gels": {
    "actions": {
        "create": "/gels",
        "read": "/gels",
        "first": "/gels/page=1",
        "last": "/gels/page=-1"
    }
} }


**Create a new empty gel plate.**

* `number_of_rows` number of rows in the rack
* `number_of_columns` number of columns in the rack
* `windows_description` map aliquots to window locations
POST /gels
> Accept: application/json
{ "gel": {
    "number_of_rows": 8,
    "number_of_columns": 12,
    "windows_description": {}
}}
< 200
< Content-Type: application/json
{ "gel": {
    "actions": {
        "read": "/11111111-2222-3333-4444-555555555555",
        "update": "/11111111-2222-3333-4444-555555555555",
        "delete": "/11111111-2222-3333-4444-555555555555",
        "create": "/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "number_of_rows": 8,
    "number_of_columns": 12,
    "windows": { 
        "A1": [], "A2": [], "A3": [], "A4": [], "A5": [], "A6": [], "A7": [], "A8": [], "A9": [], "A10": [], "A11": [], "A12": [],
        "B1": [], "B2": [], "B3": [], "B4": [], "B5": [], "B6": [], "B7": [], "B8": [], "B9": [], "B10": [], "B11": [], "B12": [],
        "C1": [], "C2": [], "C3": [], "C4": [], "C5": [], "C6": [], "C7": [], "C8": [], "C9": [], "C10": [], "C11": [], "C12": [],
        "D1": [], "D2": [], "D3": [], "D4": [], "D5": [], "D6": [], "D7": [], "D8": [], "D9": [], "D10": [], "D11": [], "D12": [],
        "E1": [], "E2": [], "E3": [], "E4": [], "E5": [], "E6": [], "E7": [], "E8": [], "E9": [], "E10": [], "E11": [], "E12": [],
        "F1": [], "F2": [], "F3": [], "F4": [], "F5": [], "F6": [], "F7": [], "F8": [], "F9": [], "F10": [], "F11": [], "F12": [],
        "G1": [], "G2": [], "G3": [], "G4": [], "G5": [], "G6": [], "G7": [], "G8": [], "G9": [], "G10": [], "G11": [], "G12": [],
        "H1": [], "H2": [], "H3": [], "H4": [], "H5": [], "H6": [], "H7": [], "H8": [], "H9": [], "H10": [], "H11": [], "H12": []}
}}


**Create a new gel plate.**

* `number_of_rows` number of rows in the gel plate
* `number_of_columns` number of columns in the gel plate
* `windows_description` map tubes identified by their uuids to rack locations
POST /gels
> Accept: application/json
{ "gel": {
    "number_of_rows": 8,
    "number_of_columns": 12,
    "windows_description": { 
        "C5": [{ "sample": "11111111-2222-3333-4444-666666666666", "type": "DNA", "quantity": 10 }]
    }
} }
< 200
< Content-Type: application/json
{ "gel": {
    "actions": {
        "read": "/11111111-2222-3333-4444-555555555555",
        "update": "/11111111-2222-3333-4444-555555555555",
        "delete": "/11111111-2222-3333-4444-555555555555",
        "create": "/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "number_of_rows": 8,
    "number_of_columns": 12,
    "windows": { 
        "A1": [], "A2": [], "A3": [], "A4": [], "A5": [], "A6": [], "A7": [], "A8": [], "A9": [], "A10": [], "A11": [], "A12": [],
        "B1": [], "B2": [], "B3": [], "B4": [], "B5": [], "B6": [], "B7": [],"B8": [],"B9": [],"B10": [],"B11": [],"B12": [],
        "C1": [], "C2": [], "C3": [], "C4": [], 
        "C5": [ { "sample": {
            "actions": { 
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666",
                "create": "/11111111-2222-3333-4444-666666666666" 
            },
            "uuid": "11111111-2222-3333-4444-666666666666",
            "name": "sample 1"},
            "quantity": 10,
            "type": "DNA",
            "unit": "mole"
        } ],
        "C6": [],"C7": [],"C8": [],"C9": [],"C10": [],"C11": [],"C12": [],
        "D1": [], "D2": [], "D3": [], "D4": [], "D5": [], "D6": [], "D7": [],"D8": [],"D9": [],"D10": [],"D11": [],"D12": [],
        "E1": [], "E2": [], "E3": [], "E4": [], "E5": [], "E6": [], "E7": [],"E8": [],"E9": [],"E10": [],"E11": [],"E12": [],
        "F1": [], "F2": [], "F3": [], "F4": [], "F5": [], "F6": [], "F7": [],"F8": [],"F9": [],"F10": [],"F11": [],"F12": [],
        "G1": [], "G2": [], "G3": [], "G4": [], "G5": [], "G6": [], "G7": [],"G8": [],"G9": [],"G10": [],"G11": [],"G12": [],
        "H1": [], "H2": [], "H3": [], "H4": [], "H5": [], "H6": [], "H7": [],"H8": [],"H9": [],"H10": [],"H11": [],"H12": []}
}}


--
Order Resource
--
An order stores all the information needed by a pipeline to achieve works. In particular, an order has a list of 
items which are used and a status. Items map a role to a resource (like a plate or a tube). A role informs how 
an item participates in the order. A status represents the progress of the order from an end-user point
of view. A status is meant to be used in order related application, not by the pipeline. Typically, when the
pipeline interacts with the order, its status should be `in_progress`. Here is the different status for an order: 

* `draft` this is the initial state on order creation
* `pending` after a `build` event. The order has been validated by the user and is ready to be used
* `in_progress` after a `start` event. The order has been started, it belongs to a pipeline and works are in progress
* `completed` after a `complete` event. The order has been fulfilled with success. The order cannot be modified.
* `cancelled` after a `cancel` event. The order has been cancelled by the user. The order cannot be modified.
* `failed` after a `fail` event. The order cannot be completed for some reason. The order cannot be modified.

On top of that, each item in an order gets a status which represent its progress. It can be one of the following: 

* `pending` which is the initial state of an item or after a `reset` event.
* `in_progress` after a `start` event. Some work are on-going using the item.
* `done` after a `complete` event. The item is available to be used in a new pipeline step.
* `cancelled` after a `cancel` event. The item has been cancelled by the user.
* `failed` after a `fail` event. The item cannot be done for some reason.

--
**List actions for order resource.**

* `create` creates a new order via HTTP POST request
* `read` returns the list of actions for an order resource via HTTP GET request
* `first` lists the first order resources in a page browsing system
* `last` lists the last order resources in a page browsing system
GET /orders
> Accept: application/json
< 200
< Content-Type: application/json
{ "orders": {
    "actions": {
        "create": "/orders",
        "read": "/orders",
        "first": "/orders/page=1",
        "last": "/orders/page=-1"
    }
} }


**Create a new order.**

* `study_uuid` uuid of an existing study
* `user_uuid` uuid of the order's creator
* `pipeline` pipeline name
* `cost_code` 
* `sources` map a role to an array of resource uuids. All the items in sources get a `done` status on order creation
* `targets` map a role to an array of resource uuids. All the items in targets get a `pending` status on order creation
POST /orders
> Accept: application/json
{ "order": {
    "user_uuid": "11111111-2222-3333-4444-666666666666",
    "study_uuid": "11111111-2222-3333-4444-777777777777",
    "pipeline": "pipeline 1",
    "cost_code": "cost code 1",
    "sources": {
        "Stock Plate 1": ["11111111-2222-3333-0000-111111111111"]
    },
    "targets": {
        "Tube 1": ["11111111-2222-3333-0000-222222222222", "11111111-2222-3333-0000-333333333333"]
    }
} }
< 200
< Content-Type: application/json
{ "order": {
    "actions": {
        "create": "/11111111-2222-3333-4444-555555555555",
        "read": "/11111111-2222-3333-4444-555555555555",
        "update": "/11111111-2222-3333-4444-555555555555",
        "delete": "/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "creator": {
        "actions": {
                "create": "/11111111-2222-3333-4444-666666666666",
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666"
            },
        "uuid": "11111111-2222-3333-4444-666666666666"
    },
    "study": {
        "actions": {
            "create": "/11111111-2222-3333-4444-777777777777",
            "read": "/11111111-2222-3333-4444-777777777777",
            "update": "/11111111-2222-3333-4444-777777777777",
            "delete": "/11111111-2222-3333-4444-777777777777"
        },
        "uuid": "11111111-2222-3333-4444-777777777777"
    },
    "pipeline": "pipeline 1",
    "cost_code": "cost code 1",
    "status": "draft",
    "parameters": {},
    "state": {},
    "items": {
        "Stock Plate 1": [
            { "status": "done", "batch": null, "uuid": "11111111-2222-3333-0000-111111111111" }
        ],
        "Tube 1": [
            { "status": "pending", "batch": null, "uuid": "11111111-2222-3333-0000-222222222222" },
            { "status": "pending", "batch": null, "uuid": "11111111-2222-3333-0000-333333333333" }
        ]
    }
} }


**Update an order.**

* `items` maps a role to a resource uuid and its update parameters. The item gets the status associated to its `event` parameter.
* `event` updates the order status.
* `pipeline` updates the pipeline parameter
* `study_uuid` updates the study parameter
* `creator_uuid` updates the creator parameter
* `cost_code` updates the cost_code parameter
* `parameters` updates the parameters attribute
* `state` updates the state parameter
PUT /11111111-2222-3333-4444-555555555555
> Accept: application/json
{
    "items": {
        "New Tube": {
            "11111111-0000-0000-0000-111111111111": { "event": "start" }
        }
    },
    "pipeline": "pipeline 2",
    "study_uuid": "11111111-2222-3333-4444-777777777777",
    "user_uuid": "11111111-2222-3333-4444-666666666666",
    "cost_code": "cost code 2",
    "parameters": {"param_1": "custom parameter"},
    "state": {"state_1": "information about order state"}
}
< 200
< Content-Type: application/json
{ "order": {
    "actions": {
        "create": "/11111111-2222-3333-4444-555555555555",
        "read": "/11111111-2222-3333-4444-555555555555",
        "update": "/11111111-2222-3333-4444-555555555555",
        "delete": "/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "pipeline": "pipeline 2",
    "status": "draft",
    "parameters": {
        "param_1": "custom parameter"
    },
    "state": {
        "state_1": "information about order state"
    },
    "cost_code": "cost code 2",
    "creator": {
        "actions": {
                "create": "/11111111-2222-3333-4444-666666666666",
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666"
            },
        "uuid": "11111111-2222-3333-4444-666666666666"
    },
    "study": {
        "actions": {
            "create": "/11111111-2222-3333-4444-777777777777",
            "read": "/11111111-2222-3333-4444-777777777777",
            "update": "/11111111-2222-3333-4444-777777777777",
            "delete": "/11111111-2222-3333-4444-777777777777"
        },
        "uuid": "11111111-2222-3333-4444-777777777777"
    },
    "items": {
        "Stock Plate 1": [
            { "uuid": "11111111-2222-3333-4444-888888888888", "status": "done", "batch": null }
        ],
        "Tube 1": [
            { "uuid": "11111111-2222-3333-4444-999999999999", "status": "pending", "batch": null }
        ],
        "New Tube": [
            { "uuid": "11111111-0000-0000-0000-111111111111", "status": "in_progress", "batch": null }
        ]
    }
} }


**Assign an item to a batch**

This example can be combined with more complete order update using the above update example.

* `items` can take a `batch_uuid` attribute to assign an item to a batch

The example below update an order and assign the item `11111111-2222-3333-4444-666666666666` to the batch 
`11111111-2222-3333-4444-777777777777`. Note that an item can be assigned to a batch only through 
an update order action.
PUT /11111111-2222-3333-4444-555555555555
> Accept: application/json
{ "items": {
    "role1": {
        "11111111-2222-3333-4444-666666666666": {"batch_uuid": "11111111-2222-3333-4444-777777777777"}
    }
} }
< 200
< Content-Type: application/json
{
   "order":{
      "actions":{
         "read":"/11111111-2222-3333-4444-555555555555",
         "create":"/11111111-2222-3333-4444-555555555555",
         "update":"/11111111-2222-3333-4444-555555555555",
         "delete":"/11111111-2222-3333-4444-555555555555"
      },
      "uuid":"11111111-2222-3333-4444-555555555555",
      "pipeline":"P1",
      "status":"draft",
      "parameters":{},
      "state":{},
      "cost_code":"cost code",
      "creator":{
         "actions":{
            "read":"/11111111-1111-1111-1111-000000000000",
            "create":"/11111111-1111-1111-1111-000000000000",
            "update":"/11111111-1111-1111-1111-000000000000",
            "delete":"/11111111-1111-1111-1111-000000000000"
         },
         "uuid":"11111111-1111-1111-1111-000000000000"
      },
      "study":{
         "actions":{
            "read":"/11111111-1111-1111-1111-111111111111",
            "create":"/11111111-1111-1111-1111-111111111111",
            "update":"/11111111-1111-1111-1111-111111111111",
            "delete":"/11111111-1111-1111-1111-111111111111"
         },
         "uuid":"11111111-1111-1111-1111-111111111111"
      },
      "items":{
         "role1":[
            {
               "uuid":"11111111-2222-3333-4444-666666666666",
               "status":"pending",
               "batch":{
                  "actions":{
                     "read":"/11111111-2222-3333-4444-777777777777",
                     "create":"/11111111-2222-3333-4444-777777777777",
                     "update":"/11111111-2222-3333-4444-777777777777",
                     "delete":"/11111111-2222-3333-4444-777777777777"
                  },
                  "uuid":"11111111-2222-3333-4444-777777777777",
                  "process":"manual extraction"
               }
            }
         ]
      }
   }
}


--
Labellable Resource
--
**List actions for a labellable resource.**

* `create` creates a new labellable via HTTP POST request
* `read` currently returns the list of actions for a labellable resource via HTTP GET request
* `first` lists the first labellable resources in a page browsing system
* `last` lists the last labellable resources in a page browsing system
GET /labellables
> Accept: application/json
< 200
< Content-Type: application/json
{ "labellables": {
    "actions": {
        "create": "/labellables",
        "read": "/labellables",
        "first": "/labellables/page=1",
        "last": "/labellables/page=-1"
    }
} }


**Create labellable** (add a label to an asset)

* `name` unique identifier of an asset (for example: uuid of a plate)
* `type` type of the object the labellable related (resource, equipment, user etc...)
* `labels` it is a hash which contains the information of the labels.
By labels we mean any readable information found on a physical object.
Label can eventually be identified by a position: an arbitray string (not a Symbol).
It has a value, which can be serial number, stick label with barcode etc.
It has a type, which can be sanger-barcode, 2d-barcode, ean13-barcode etc...
POST /labellables
> Accept: application/json
{ "labellable": {
    "name": "11111111-2222-3333-4444-000000000000",
    "type": "resource",
    "labels": {
        "front barcode": {
            "value": "1234-ABC",
            "type": "sanger-barcode"
        }
    }
}}
< 200
< Content-Type: application/json
{ "labellable": {
    "actions": {
        "read": "http://example.org/11111111-2222-3333-4444-555555555555",
        "update": "http://example.org/11111111-2222-3333-4444-555555555555",
        "delete": "http://example.org/11111111-2222-3333-4444-555555555555",
        "create": "http://example.org/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "name": "11111111-2222-3333-4444-000000000000",
    "type": "resource",
    "labels": {
        "front barcode": {
            "value": "1234-ABC",
            "type": "sanger-barcode"
        }
    }
}}


**Bulk create labellable**

* `labellables` is mandatory
POST /actions/bulk_create_labellable
> Accept: application/json
{
    "bulk_create_labellable": {
        "labellables": [
            {
                "name": "11111111-0000-0000-0000-111111111111",
                "type": "resource",
                "labels": {
                    "front barcode": {
                        "value": "1234-ABC",
                        "type": "sanger-barcode"
                    }
                }
            },
            {
                "name": "11111111-0000-0000-0000-222222222222",
                "type": "resource",
                "labels": {
                    "front barcode": {
                        "value": "5678-DEF",
                        "type": "ean13-barcode"
                    }
                }
            },
            {
                "name": "11111111-0000-0000-0000-333333333333",
                "type": "resource",
                "labels": {
                    "front barcode": {
                        "value": "9101-GHI",
                        "type": "ean13-barcode"
                    }
                }
            }
        ]
    }
}
< 200
< Content-Type: application/json
{
    "bulk_create_labellable": {
        "actions": {
        },
        "user": "user",
        "application": "application",
        "result": {
            "labellables": [
                {
                    "actions": {
                        "read": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "create": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "update": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "delete": "http://example.org/11111111-2222-3333-4444-555555555555"
                    },
                    "uuid": "11111111-2222-3333-4444-555555555555",
                    "name": "11111111-0000-0000-0000-111111111111",
                    "type": "resource",
                    "labels": {
                        "front barcode": {
                            "value": "1234-ABC",
                            "type": "sanger-barcode"
                        }
                    }
                },
                {
                    "actions": {
                        "read": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "create": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "update": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "delete": "http://example.org/11111111-2222-3333-4444-666666666666"
                    },
                    "uuid": "11111111-2222-3333-4444-666666666666",
                    "name": "11111111-0000-0000-0000-222222222222",
                    "type": "resource",
                    "labels": {
                        "front barcode": {
                            "value": "5678-DEF",
                            "type": "ean13-barcode"
                        }
                    }
                },
                {
                    "actions": {
                        "read": "http://example.org/11111111-2222-3333-4444-777777777777",
                        "create": "http://example.org/11111111-2222-3333-4444-777777777777",
                        "update": "http://example.org/11111111-2222-3333-4444-777777777777",
                        "delete": "http://example.org/11111111-2222-3333-4444-777777777777"
                    },
                    "uuid": "11111111-2222-3333-4444-777777777777",
                    "name": "11111111-0000-0000-0000-333333333333",
                    "type": "resource",
                    "labels": {
                        "front barcode": {
                            "value": "9101-GHI",
                            "type": "ean13-barcode"
                        }
                    }
                }
            ]
        },
        "labellables": [
            {
                "name": "11111111-0000-0000-0000-111111111111",
                "type": "resource",
                "labels": {
                    "front barcode": {
                        "value": "1234-ABC",
                        "type": "sanger-barcode"
                    }
                }
            },
            {
                "name": "11111111-0000-0000-0000-222222222222",
                "type": "resource",
                "labels": {
                    "front barcode": {
                        "value": "5678-DEF",
                        "type": "ean13-barcode"
                    }
                }
            },
            {
                "name": "11111111-0000-0000-0000-333333333333",
                "type": "resource",
                "labels": {
                    "front barcode": {
                        "value": "9101-GHI",
                        "type": "ean13-barcode"
                    }
                }
            }
        ]
    }
}


**Add multiply labels to an asset with an existing label.**

* `labellable_uuid` unique identifier of an object the labellable related to
* `type` the type of the label. It can be 'sanger-barcode', '2d-barcode', 'ean13-barcode' etc...
* `value` the value of the barcode
* `position` the position of the barcode is an arbitray string (not a Symbol).
POST /actions/create_label
> Accept: application/json
{ "create_label": {
    "labellable_uuid": "11111111-2222-3333-4444-555555555555",
    "type": "2d-barcode",
    "value": "2d-barcode-1234",
    "position": "rear barcode"
}}
< 200
< Content-Type: application/json
{ "create_label": {
    "actions": {
    },
    "user": "user",
    "application": "application",
    "result": {
        "labellable": {
            "actions": {
                "read": "http://example.org/11111111-2222-3333-4444-555555555555",
                "update": "http://example.org/11111111-2222-3333-4444-555555555555",
                "delete": "http://example.org/11111111-2222-3333-4444-555555555555",
                "create": "http://example.org/11111111-2222-3333-4444-555555555555"
            },
            "uuid": "11111111-2222-3333-4444-555555555555",
            "name": "11111111-2222-3333-4444-000000000000",
            "type": "resource",
            "labels": {
                "front barcode": {
                    "value": "1234-ABC",
                    "type": "sanger-barcode"
                },
                "rear barcode": {
                    "value": "2d-barcode-1234",
                    "type": "2d-barcode"
                }
            }
        }
    },
    "labellable_uuid": "11111111-2222-3333-4444-555555555555",
    "type": "2d-barcode",
    "value": "2d-barcode-1234",
    "position": "rear barcode"
}}


--
Batch Resource
--
A batch groups order items together.
**Create a new batch**

* `process` the process that the batch is going through
POST /batches
> Accept: application/json
{ "batch": {"process": "manual extraction"} }
< 200
< Content-Type: application/json
{
   "batch":{
      "actions":{
         "read":"/11111111-2222-3333-4444-555555555555",
         "create":"/11111111-2222-3333-4444-555555555555",
         "update":"/11111111-2222-3333-4444-555555555555",
         "delete":"/11111111-2222-3333-4444-555555555555"
      },
      "uuid":"11111111-2222-3333-4444-555555555555",
      "process":"manual extraction"
   }
}


--
Sample Resource
--
**Create a new sample**

* `taxon_id`, `scientific_name`, `common_name` and `supplier_sample_name` are mandatory
* `taxon_id` and `scientific_name`/`common_name` must match
* `sample_type` must belong to `DNA Human`, `DNA Pathogen`, `RNA`, `Blood`, `Saliva`, `Tissue Non-Tumour`, `Tissue Tumour`, `Pathogen`
* `gender` must belong to `Not applicable`, `Male`, `Female`, `Mixed`, `Hermaphrodite`, `Unknown`

See the example below to know the list of available parameters for a sample.
POST /samples
> Accept: application/json
{
    "sample": {
        "gender": "Male",
        "sample_type": "RNA",
        "taxon_id": 9606,
        "volume": 100,
        "date_of_sample_collection": "2013-04-25 10:27 UTC",
        "is_sample_a_control": true,
        "is_re_submitted_sample": false,
        "hmdmc_number": "number",
        "supplier_sample_name": "name",
        "common_name": "human",
        "scientific_name": "homo sapiens",
        "ebi_accession_number": "number",
        "sample_source": "source",
        "mother": "mother",
        "father": "father",
        "sibling": "sibling",
        "gc_content": "content",
        "public_name": "name",
        "cohort": "cohort",
        "storage_conditions": "conditions",
        "dna": {
            "pre_amplified": true,
            "date_of_sample_extraction": "2013-04-25 11:05 UTC",
            "extraction_method": "method",
            "concentration": 20,
            "sample_purified": false,
            "concentration_determined_by_which_method": "method"
        },
        "rna": {
            "pre_amplified": true,
            "date_of_sample_extraction": "2013-04-25 11:05 UTC",
            "extraction_method": "method",
            "concentration": 20,
            "sample_purified": false,
            "concentration_determined_by_which_method": "method"
        },
        "cellular_material": {
            "lysed": true
        },
        "genotyping": {
            "country_of_origin": "England",
            "geographical_region": "UK",
            "ethnicity": "English"
        }
    }
}
< 200
< Content-Type: application/json
{
    "sample": {
        "actions": {
            "read": "http://example.org/11111111-2222-3333-4444-555555555555",
            "create": "http://example.org/11111111-2222-3333-4444-555555555555",
            "update": "http://example.org/11111111-2222-3333-4444-555555555555",
            "delete": "http://example.org/11111111-2222-3333-4444-555555555555"
        },
        "uuid": "11111111-2222-3333-4444-555555555555",
        "sanger_sample_id": "S2-b0709880b00b4d36b2275dec3d2b5ab0",
        "gender": "Male",
        "sample_type": "RNA",
        "hmdmc_number": "number",
        "supplier_sample_name": "name",
        "common_name": "human",
        "scientific_name": "homo sapiens",
        "ebi_accession_number": "number",
        "sample_source": "source",
        "mother": "mother",
        "father": "father",
        "sibling": "sibling",
        "gc_content": "content",
        "public_name": "name",
        "cohort": "cohort",
        "storage_conditions": "conditions",
        "taxon_id": 9606,
        "volume": 100,
        "date_of_sample_collection": "2013-04-25T10:27:00+00:00",
        "is_sample_a_control": true,
        "is_re_submitted_sample": false,
        "dna": {
            "pre_amplified": true,
            "date_of_sample_extraction": "2013-04-25T11:05:00+00:00",
            "extraction_method": "method",
            "concentration": 20,
            "sample_purified": false,
            "concentration_determined_by_which_method": "method"
        },
        "rna": {
            "pre_amplified": true,
            "date_of_sample_extraction": "2013-04-25T11:05:00+00:00",
            "extraction_method": "method",
            "concentration": 20,
            "sample_purified": false,
            "concentration_determined_by_which_method": "method"
        },
        "cellular_material": {
            "lysed": true
        },
        "genotyping": {
            "country_of_origin": "England",
            "geographical_region": "UK",
            "ethnicity": "English"
        }
    }
}


**Update a sample**

* `taxon_id` and `scientific_name`/`common_name` must match
* `sample_type` must belong to `DNA Human`, `DNA Pathogen`, `RNA`, `Blood`, `Saliva`, `Tissue Non-Tumour`, `Tissue Tumour`, `Pathogen`
* `gender` must belong to `Not applicable`, `Male`, `Female`, `Mixed`, `Hermaphrodite`, `Unknown`

See the example below to know the list of available parameters for a sample.
PUT /11111111-2222-3333-4444-555555555555
> Accept: application/json
{
    "gender": "Male",
    "sample_type": "RNA",
    "taxon_id": 9606,
    "volume": 100,
    "date_of_sample_collection": "2013-04-25 10:27 UTC",
    "is_sample_a_control": true,
    "is_re_submitted_sample": false,
    "hmdmc_number": "number",
    "supplier_sample_name": "name",
    "common_name": "human",
    "scientific_name": "homo sapiens",
    "ebi_accession_number": "number",
    "sample_source": "source",
    "mother": "mother",
    "father": "father",
    "sibling": "sibling",
    "gc_content": "content",
    "public_name": "name",
    "cohort": "cohort",
    "storage_conditions": "conditions",
    "dna": {
        "pre_amplified": true,
        "date_of_sample_extraction": "2013-04-25 11:05 UTC",
        "extraction_method": "method",
        "concentration": 20,
        "sample_purified": false,
        "concentration_determined_by_which_method": "method"
    },
    "rna": {
        "pre_amplified": true,
        "date_of_sample_extraction": "2013-04-25 11:05 UTC",
        "extraction_method": "method",
        "concentration": 20,
        "sample_purified": false,
        "concentration_determined_by_which_method": "method"
    },
    "cellular_material": {
        "lysed": true
    },
    "genotyping": {
        "country_of_origin": "England",
        "geographical_region": "UK",
        "ethnicity": "English"
    }
}
< 200
< Content-Type: application/json
{
    "sample": {
        "actions": {
            "read": "http://example.org/11111111-2222-3333-4444-555555555555",
            "create": "http://example.org/11111111-2222-3333-4444-555555555555",
            "update": "http://example.org/11111111-2222-3333-4444-555555555555",
            "delete": "http://example.org/11111111-2222-3333-4444-555555555555"
        },
        "uuid": "11111111-2222-3333-4444-555555555555",
        "sanger_sample_id": "S2-b0709880b00b4d36b2275dec3d2b5ab0",
        "gender": "Male",
        "sample_type": "RNA",
        "hmdmc_number": "number",
        "supplier_sample_name": "name",
        "common_name": "human",
        "scientific_name": "homo sapiens",
        "ebi_accession_number": "number",
        "sample_source": "source",
        "mother": "mother",
        "father": "father",
        "sibling": "sibling",
        "gc_content": "content",
        "public_name": "name",
        "cohort": "cohort",
        "storage_conditions": "conditions",
        "taxon_id": 9606,
        "volume": 100,
        "date_of_sample_collection": "2013-04-25T10:27:00+00:00",
        "is_sample_a_control": true,
        "is_re_submitted_sample": false,
        "dna": {
            "pre_amplified": true,
            "date_of_sample_extraction": "2013-04-25T11:05:00+00:00",
            "extraction_method": "method",
            "concentration": 20,
            "sample_purified": false,
            "concentration_determined_by_which_method": "method"
        },
        "rna": {
            "pre_amplified": true,
            "date_of_sample_extraction": "2013-04-25T11:05:00+00:00",
            "extraction_method": "method",
            "concentration": 20,
            "sample_purified": false,
            "concentration_determined_by_which_method": "method"
        },
        "cellular_material": {
            "lysed": true
        },
        "genotyping": {
            "country_of_origin": "England",
            "geographical_region": "UK",
            "ethnicity": "English"
        }
    }
}


**Delete a sample**

DELETE /11111111-2222-3333-4444-555555555555
> Accept: application/json
< 200
< Content-Type: application/json
{
    "sample": {
        "actions": {
            "read": "http://example.org/11111111-2222-3333-4444-555555555555",
            "create": "http://example.org/11111111-2222-3333-4444-555555555555",
            "update": "http://example.org/11111111-2222-3333-4444-555555555555",
            "delete": "http://example.org/11111111-2222-3333-4444-555555555555"
        },
        "uuid": "11111111-2222-3333-4444-555555555555",
        "sanger_sample_id": "S2-b0709880b00b4d36b2275dec3d2b5ab0",
        "gender": "Male",
        "sample_type": "RNA",
        "hmdmc_number": "number",
        "supplier_sample_name": "name",
        "common_name": "human",
        "scientific_name": "homo sapiens",
        "ebi_accession_number": "number",
        "sample_source": "source",
        "mother": "mother",
        "father": "father",
        "sibling": "sibling",
        "gc_content": "content",
        "public_name": "name",
        "cohort": "cohort",
        "storage_conditions": "conditions",
        "taxon_id": 9606,
        "volume": 100,
        "date_of_sample_collection": "2013-04-25T10:27:00+00:00",
        "is_sample_a_control": true,
        "is_re_submitted_sample": false,
        "dna": {
            "pre_amplified": true,
            "date_of_sample_extraction": "2013-04-25T11:05:00+00:00",
            "extraction_method": "method",
            "concentration": 20,
            "sample_purified": false,
            "concentration_determined_by_which_method": "method"
        },
        "rna": {
            "pre_amplified": true,
            "date_of_sample_extraction": "2013-04-25T11:05:00+00:00",
            "extraction_method": "method",
            "concentration": 20,
            "sample_purified": false,
            "concentration_determined_by_which_method": "method"
        },
        "cellular_material": {
            "lysed": true
        },
        "genotyping": {
            "country_of_origin": "England",
            "geographical_region": "UK",
            "ethnicity": "English"
        }
    }
}


**Bulk create samples**

* `quantity`, `taxon_id`, `scientific_name`, `common_name` and `supplier_sample_name` are mandatory
* `taxon_id` and `scientific_name`/`common_name` must match
* `sample_type` must belong to `DNA Human`, `DNA Pathogen`, `RNA`, `Blood`, `Saliva`, `Tissue Non-Tumour`, `Tissue Tumour`, `Pathogen`
* `gender` must belong to `Not applicable`, `Male`, `Female`, `Mixed`, `Hermaphrodite`, `Unknown`

See the example below to know the list of available parameters for a sample.
POST /actions/bulk_create_sample
> Accept: application/json
{
    "bulk_create_sample": {
        "quantity": 3,
        "gender": "Male",
        "sample_type": "RNA",
        "taxon_id": 9606,
        "volume": 100,
        "date_of_sample_collection": "2013-04-25 10:27 UTC",
        "is_sample_a_control": true,
        "is_re_submitted_sample": false,
        "hmdmc_number": "number",
        "supplier_sample_name": "name",
        "common_name": "human",
        "scientific_name": "homo sapiens",
        "ebi_accession_number": "number",
        "sample_source": "source",
        "mother": "mother",
        "father": "father",
        "sibling": "sibling",
        "gc_content": "content",
        "public_name": "name",
        "cohort": "cohort",
        "storage_conditions": "conditions",
        "dna": {
            "pre_amplified": true,
            "date_of_sample_extraction": "2013-04-25 11:05 UTC",
            "extraction_method": "method",
            "concentration": 20,
            "sample_purified": false,
            "concentration_determined_by_which_method": "method"
        },
        "rna": {
            "pre_amplified": true,
            "date_of_sample_extraction": "2013-04-25 11:05 UTC",
            "extraction_method": "method",
            "concentration": 20,
            "sample_purified": false,
            "concentration_determined_by_which_method": "method"
        },
        "cellular_material": {
            "lysed": true
        },
        "genotyping": {
            "country_of_origin": "England",
            "geographical_region": "UK",
            "ethnicity": "English"
        }
    }
}
< 200
< Content-Type: application/json
{
    "bulk_create_sample": {
        "actions": {
        },
        "user": "user",
        "application": "application",
        "result": {
            "samples": [
                {
                    "actions": {
                        "read": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "create": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "update": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "delete": "http://example.org/11111111-2222-3333-4444-555555555555"
                    },
                    "uuid": "11111111-2222-3333-4444-555555555555",
                    "sanger_sample_id": "S2-cd9b200ec5634288ad5b4f56eab2a84f",
                    "gender": "Male",
                    "sample_type": "RNA",
                    "hmdmc_number": "number",
                    "supplier_sample_name": "name",
                    "common_name": "human",
                    "scientific_name": "homo sapiens",
                    "ebi_accession_number": "number",
                    "sample_source": "source",
                    "mother": "mother",
                    "father": "father",
                    "sibling": "sibling",
                    "gc_content": "content",
                    "public_name": "name",
                    "cohort": "cohort",
                    "storage_conditions": "conditions",
                    "taxon_id": 9606,
                    "volume": 100,
                    "date_of_sample_collection": "2013-04-25T10:27:00+00:00",
                    "is_sample_a_control": true,
                    "is_re_submitted_sample": false,
                    "dna": {
                        "pre_amplified": true,
                        "date_of_sample_extraction": "2013-04-25T11:10:00+00:00",
                        "extraction_method": "method",
                        "concentration": 20,
                        "sample_purified": false,
                        "concentration_determined_by_which_method": "method"
                    },
                    "rna": {
                        "pre_amplified": true,
                        "date_of_sample_extraction": "2013-04-25T11:10:00+00:00",
                        "extraction_method": "method",
                        "concentration": 20,
                        "sample_purified": false,
                        "concentration_determined_by_which_method": "method"
                    },
                    "cellular_material": {
                        "lysed": true
                    },
                    "genotyping": {
                        "country_of_origin": "England",
                        "geographical_region": "UK",
                        "ethnicity": "english"
                    }
                },
                {
                    "actions": {
                        "read": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "create": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "update": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "delete": "http://example.org/11111111-2222-3333-4444-666666666666"
                    },
                    "uuid": "11111111-2222-3333-4444-666666666666",
                    "sanger_sample_id": "S2-745819ae3dfe401caa68a87a90c95a4c",
                    "gender": "Male",
                    "sample_type": "RNA",
                    "hmdmc_number": "number",
                    "supplier_sample_name": "name",
                    "common_name": "human",
                    "scientific_name": "homo sapiens",
                    "ebi_accession_number": "number",
                    "sample_source": "source",
                    "mother": "mother",
                    "father": "father",
                    "sibling": "sibling",
                    "gc_content": "content",
                    "public_name": "name",
                    "cohort": "cohort",
                    "storage_conditions": "conditions",
                    "taxon_id": 9606,
                    "volume": 100,
                    "date_of_sample_collection": "2013-04-25T10:27:00+00:00",
                    "is_sample_a_control": true,
                    "is_re_submitted_sample": false,
                    "dna": {
                        "pre_amplified": true,
                        "date_of_sample_extraction": "2013-04-25T11:10:00+00:00",
                        "extraction_method": "method",
                        "concentration": 20,
                        "sample_purified": false,
                        "concentration_determined_by_which_method": "method"
                    },
                    "rna": {
                        "pre_amplified": true,
                        "date_of_sample_extraction": "2013-04-25T11:10:00+00:00",
                        "extraction_method": "method",
                        "concentration": 20,
                        "sample_purified": false,
                        "concentration_determined_by_which_method": "method"
                    },
                    "cellular_material": {
                        "lysed": true
                    },
                    "genotyping": {
                        "country_of_origin": "England",
                        "geographical_region": "UK",
                        "ethnicity": "english"
                    }
                },
                {
                    "actions": {
                        "read": "http://example.org/11111111-2222-3333-4444-777777777777",
                        "create": "http://example.org/11111111-2222-3333-4444-777777777777",
                        "update": "http://example.org/11111111-2222-3333-4444-777777777777",
                        "delete": "http://example.org/11111111-2222-3333-4444-777777777777"
                    },
                    "uuid": "11111111-2222-3333-4444-777777777777",
                    "sanger_sample_id": "S2-97322cddad764d5f98b5255e3d329c66",
                    "gender": "Male",
                    "sample_type": "RNA",
                    "hmdmc_number": "number",
                    "supplier_sample_name": "name",
                    "common_name": "human",
                    "scientific_name": "homo sapiens",
                    "ebi_accession_number": "number",
                    "sample_source": "source",
                    "mother": "mother",
                    "father": "father",
                    "sibling": "sibling",
                    "gc_content": "content",
                    "public_name": "name",
                    "cohort": "cohort",
                    "storage_conditions": "conditions",
                    "taxon_id": 9606,
                    "volume": 100,
                    "date_of_sample_collection": "2013-04-25T10:27:00+00:00",
                    "is_sample_a_control": true,
                    "is_re_submitted_sample": false,
                    "dna": {
                        "pre_amplified": true,
                        "date_of_sample_extraction": "2013-04-25T11:10:00+00:00",
                        "extraction_method": "method",
                        "concentration": 20,
                        "sample_purified": false,
                        "concentration_determined_by_which_method": "method"
                    },
                    "rna": {
                        "pre_amplified": true,
                        "date_of_sample_extraction": "2013-04-25T11:10:00+00:00",
                        "extraction_method": "method",
                        "concentration": 20,
                        "sample_purified": false,
                        "concentration_determined_by_which_method": "method"
                    },
                    "cellular_material": {
                        "lysed": true
                    },
                    "genotyping": {
                        "country_of_origin": "England",
                        "geographical_region": "UK",
                        "ethnicity": "english"
                    }
                }
            ]
        },
        "quantity": 3,
        "taxon_id": 9606,
        "volume": 100,
        "date_of_sample_collection": "2013-04-25 10:27 UTC",
        "is_sample_a_control": true,
        "is_re_submitted_sample": false,
        "hmdmc_number": "number",
        "supplier_sample_name": "name",
        "common_name": "human",
        "scientific_name": "homo sapiens",
        "ebi_accession_number": "number",
        "sample_source": "source",
        "mother": "mother",
        "father": "father",
        "sibling": "sibling",
        "gc_content": "content",
        "public_name": "name",
        "cohort": "cohort",
        "storage_conditions": "conditions",
        "gender": "Male",
        "sample_type": "RNA",
        "dna": {
            "pre_amplified": true,
            "date_of_sample_extraction": "2013-04-25 11:10 UTC",
            "extraction_method": "method",
            "concentration": 20,
            "sample_purified": false,
            "concentration_determined_by_which_method": "method"
        },
        "rna": {
            "pre_amplified": true,
            "date_of_sample_extraction": "2013-04-25 11:10 UTC",
            "extraction_method": "method",
            "concentration": 20,
            "sample_purified": false,
            "concentration_determined_by_which_method": "method"
        },
        "cellular_material": {
            "lysed": true
        },
        "genotyping": {
            "country_of_origin": "England",
            "geographical_region": "UK",
            "ethnicity": "english"
        }
    }
}


**Bulk update samples**

* `by` must belong to `uuid`, `sanger_sample_id`. If `by` is null, it assumes uuids are used.
* `updates` is mandatory

See the example below to know the list of available parameters for a sample.
POST /actions/bulk_update_sample
> Accept: application/json
{
    "bulk_update_sample": {
        "by": "uuid",
        "updates": {
            "11111111-2222-3333-4444-555555555555": {"volume": 5000},
            "11111111-2222-3333-4444-666666666666": {"volume": 4000}
        }
    }
}
< 200
< Content-Type: application/json
{
    "bulk_update_sample": {
        "actions": {
        },
        "user": "user",
        "application": "application",
        "result": {
            "samples": [
                {
                    "actions": {
                        "read": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "create": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "update": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "delete": "http://example.org/11111111-2222-3333-4444-555555555555"
                    },
                    "uuid": "11111111-2222-3333-4444-555555555555",
                    "sanger_sample_id": "S2-cd9b200ec5634288ad5b4f56eab2a84f",
                    "gender": "Male",
                    "sample_type": "RNA",
                    "hmdmc_number": "number",
                    "supplier_sample_name": "name",
                    "common_name": "human",
                    "scientific_name": "Homo sapiens",
                    "ebi_accession_number": "number",
                    "sample_source": "source",
                    "mother": "mother",
                    "father": "father",
                    "sibling": "sibling",
                    "gc_content": "content",
                    "public_name": "name",
                    "cohort": "cohort",
                    "storage_conditions": "conditions",
                    "taxon_id": 9606,
                    "volume": 5000,
                    "date_of_sample_collection": "2013-04-25T11:27:00+01:00",
                    "is_sample_a_control": true,
                    "is_re_submitted_sample": false
                },
                {
                    "actions": {
                        "read": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "create": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "update": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "delete": "http://example.org/11111111-2222-3333-4444-666666666666"
                    },
                    "uuid": "11111111-2222-3333-4444-666666666666",
                    "sanger_sample_id": "S2-745819ae3dfe401caa68a87a90c95a4c",
                    "gender": "Male",
                    "sample_type": "RNA",
                    "hmdmc_number": "number",
                    "supplier_sample_name": "name",
                    "common_name": "human",
                    "scientific_name": "Homo sapiens",
                    "ebi_accession_number": "number",
                    "sample_source": "source",
                    "mother": "mother",
                    "father": "father",
                    "sibling": "sibling",
                    "gc_content": "content",
                    "public_name": "name",
                    "cohort": "cohort",
                    "storage_conditions": "conditions",
                    "taxon_id": 9606,
                    "volume": 4000,
                    "date_of_sample_collection": "2013-04-25T11:27:00+01:00",
                    "is_sample_a_control": true,
                    "is_re_submitted_sample": false
                }
            ]
        },
        "by": "uuid",
        "updates": {
            "11111111-2222-3333-4444-555555555555": {"volume": 5000},
            "11111111-2222-3333-4444-666666666666": {"volume": 4000}
        }
    }
}


**Bulk delete samples**

* `sample_uuids` is mandatory

POST /actions/bulk_delete_sample
> Accept: application/json
{
    "bulk_delete_sample": {
        "sample_uuids": ["11111111-2222-3333-4444-555555555555", "11111111-2222-3333-4444-666666666666"]=
    }
}
< 200
< Content-Type: application/json
{
    "bulk_delete_sample": {
        "actions": {
        },
        "user": "user",
        "application": "application",
        "result": {
            "samples": [
                {
                    "actions": {
                        "read": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "create": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "update": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "delete": "http://example.org/11111111-2222-3333-4444-555555555555"
                    },
                    "uuid": "11111111-2222-3333-4444-555555555555",
                    "sanger_sample_id": "S2-cd9b200ec5634288ad5b4f56eab2a84f",
                    "gender": "Male",
                    "sample_type": "RNA",
                    "hmdmc_number": "number",
                    "supplier_sample_name": "name",
                    "common_name": "human",
                    "scientific_name": "Homo sapiens",
                    "ebi_accession_number": "number",
                    "sample_source": "source",
                    "mother": "mother",
                    "father": "father",
                    "sibling": "sibling",
                    "gc_content": "content",
                    "public_name": "name",
                    "cohort": "cohort",
                    "storage_conditions": "conditions",
                    "taxon_id": 9606,
                    "volume": 5000,
                    "date_of_sample_collection": "2013-04-25T11:27:00+01:00",
                    "is_sample_a_control": true,
                    "is_re_submitted_sample": false
                },
                {
                    "actions": {
                        "read": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "create": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "update": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "delete": "http://example.org/11111111-2222-3333-4444-666666666666"
                    },
                    "uuid": "11111111-2222-3333-4444-666666666666",
                    "sanger_sample_id": "S2-745819ae3dfe401caa68a87a90c95a4c",
                    "gender": "Male",
                    "sample_type": "RNA",
                    "hmdmc_number": "number",
                    "supplier_sample_name": "name",
                    "common_name": "human",
                    "scientific_name": "Homo sapiens",
                    "ebi_accession_number": "number",
                    "sample_source": "source",
                    "mother": "mother",
                    "father": "father",
                    "sibling": "sibling",
                    "gc_content": "content",
                    "public_name": "name",
                    "cohort": "cohort",
                    "storage_conditions": "conditions",
                    "taxon_id": 9606,
                    "volume": 5000,
                    "date_of_sample_collection": "2013-04-25T11:27:00+01:00",
                    "is_sample_a_control": true,
                    "is_re_submitted_sample": false
                }
            ]
        },
        "sample_uuids": [
            "11111111-2222-3333-4444-555555555555",
            "11111111-2222-3333-4444-666666666666"
        ],
        "sanger_sample_ids": null
    }
}


**Bulk delete samples by sanger sample IDs**

* `sanger_sample_ids` is mandatory

POST /actions/bulk_delete_sample
> Accept: application/json
{
    "bulk_delete_sample": {
        "sanger_sample_ids": ["S2-cd9b200ec5634288ad5b4f56eab2a84f", "S2-745819ae3dfe401caa68a87a90c95a4c"]
    }
}
< 200
< Content-Type: application/json
{
    "bulk_delete_sample": {
        "actions": {
        },
        "user": "user",
        "application": "application",
        "result": {
            "samples": [
                {
                    "actions": {
                        "read": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "create": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "update": "http://example.org/11111111-2222-3333-4444-555555555555",
                        "delete": "http://example.org/11111111-2222-3333-4444-555555555555"
                    },
                    "uuid": "11111111-2222-3333-4444-555555555555",
                    "sanger_sample_id": "S2-cd9b200ec5634288ad5b4f56eab2a84f",
                    "gender": "Male",
                    "sample_type": "RNA",
                    "hmdmc_number": "number",
                    "supplier_sample_name": "name",
                    "common_name": "human",
                    "scientific_name": "Homo sapiens",
                    "ebi_accession_number": "number",
                    "sample_source": "source",
                    "mother": "mother",
                    "father": "father",
                    "sibling": "sibling",
                    "gc_content": "content",
                    "public_name": "name",
                    "cohort": "cohort",
                    "storage_conditions": "conditions",
                    "taxon_id": 9606,
                    "volume": 5000,
                    "date_of_sample_collection": "2013-04-25T11:27:00+01:00",
                    "is_sample_a_control": true,
                    "is_re_submitted_sample": false
                },
                {
                    "actions": {
                        "read": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "create": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "update": "http://example.org/11111111-2222-3333-4444-666666666666",
                        "delete": "http://example.org/11111111-2222-3333-4444-666666666666"
                    },
                    "uuid": "11111111-2222-3333-4444-666666666666",
                    "sanger_sample_id": "S2-745819ae3dfe401caa68a87a90c95a4c",
                    "gender": "Male",
                    "sample_type": "RNA",
                    "hmdmc_number": "number",
                    "supplier_sample_name": "name",
                    "common_name": "human",
                    "scientific_name": "Homo sapiens",
                    "ebi_accession_number": "number",
                    "sample_source": "source",
                    "mother": "mother",
                    "father": "father",
                    "sibling": "sibling",
                    "gc_content": "content",
                    "public_name": "name",
                    "cohort": "cohort",
                    "storage_conditions": "conditions",
                    "taxon_id": 9606,
                    "volume": 5000,
                    "date_of_sample_collection": "2013-04-25T11:27:00+01:00",
                    "is_sample_a_control": true,
                    "is_re_submitted_sample": false
                }
            ]
        },
        "sample_uuids": null,
        "sanger_sample_ids": ["S2-cd9b200ec5634288ad5b4f56eab2a84f", "S2-745819ae3dfe401caa68a87a90c95a4c"]
    }
}


--
Search
--
**Search for a resource**

* `description` describe the search
* `model` searched model
* `criteria` set parameters for the search

The search below returns plates with ids 1 and 2.
You can search for a tube the same way as below if you know its id.

To actually get the search results, you need to access the first page of result 
thanks to the `first` action in the JSON response.
POST /searches
> Accept: application/json
{ "search": {
    "description": "search for a plate by ids",
    "model": "plate",
    "criteria": { "id": [1,2] }
}}
< 200
< Content-Type: application/json
{
    "search": {
        "actions": {
            "read": "/11111111-2222-3333-4444-555555555555",
            "first": "/11111111-2222-3333-4444-555555555555/page=1",
            "last": "/11111111-2222-3333-4444-555555555555/page=-1"
        },
        "uuid": "11111111-2222-3333-4444-555555555555"
    }
}


**Search for an order**

* `description` describe the search
* `model` searched model
* `criteria` set parameters for the search. Here, it can be a combination of the following attributes:
    * `pipeline` 
    * `items` which itself can contain the parameters `uuid`, `status`, `role` and `batch_uuid`
    * `status`
    * `cost_code`

The search below looks for an order for the `pipeline 1` which has a status `in_progress`. On top of
that, the search looks for an order which contains an item which has the uuid 
`11111111-2222-3333-4444-555555555555` in the status `done` with the role `role A` and assigned to the
batch `11111111-2222-3333-4444-666666666666`.

You can specify arrays in the criteria as well. For example, if you need to get an order which 
contains items with role `role A` and `role B`, you could have the following criteria:
`"criteria": { "item": { "role": ["role A", "role B"] } }`

To actually get the search results, you need to access the first page of result 
thanks to the `first` action in the JSON response.
POST /searches
> Accept: application/json
{ "search": {
    "description": "search for an order",
    "model": "plate",
    "criteria": {
        "pipeline": "pipeline 1",
        "status": "in_progress",
        "item": {
            "uuid": "11111111-2222-3333-4444-555555555555",
            "status": "done",
            "role": "role A",
            "batch_uuid": "11111111-2222-3333-4444-666666666666"
        }
    }
}}
< 200
< Content-Type: application/json
{
    "search": {
        "actions": {
            "read": "/11111111-2222-3333-4444-555555555555",
            "first": "/11111111-2222-3333-4444-555555555555/page=1",
            "last": "/11111111-2222-3333-4444-555555555555/page=-1"
        },
        "uuid": "11111111-2222-3333-4444-555555555555"
    }
}


**Search for a resource by label**

* `description` describe the search
* `model` searched model
* `criteria` set parameters for the search. Here, it can be a combination of the following attributes:
    * `position`
    * `type`
    * `value`

The search below looks for a tube by its label which is a `sanger-barcode` with the position 
`front barcode` and the value `ABC123456`.

To actually get the search results, you need to access the first page of result 
thanks to the `first` action in the JSON response.
POST /searches
> Accept: application/json
{ "search": {
    "description": "search for a tube by label",
    "model": "tube",
    "criteria": {
        "label": {
            "position": "front barcode",
            "type": "sanger-barcode",
            "value": "ABC123456"
        }
    }
}}
< 200
< Content-Type: application/json
{
    "search": {
        "actions": {
            "read": "/11111111-2222-3333-4444-555555555555",
            "first": "/11111111-2222-3333-4444-555555555555/page=1",
            "last": "/11111111-2222-3333-4444-555555555555/page=-1"
        },
        "uuid": "11111111-2222-3333-4444-555555555555"
    }
}


**Search for a resource by order**

* `description` describe the search
* `model` search for resource instances of model
* `criteria` set parameters for the search. Here, it can be a combination of the following attributes:
    * `pipeline` 
    * `items` which itself can contain the parameters `status` and `role`
    * `status`
    * `cost_code`

The search below looks for a tube used in a order for the pipeline `pipeline 1` which has the status `in_progress`.
On top of that, the tube used in that order should have a role `role A` and a `pending` status.

To actually get the search results, you need to access the first page of result 
thanks to the `first` action in the JSON response.
POST /searches
> Accept: application/json
{ "search": {
    "description": "search for a tube by order",
    "model": "tube",
    "criteria": {
        "order": {
            "pipeline": "pipeline 1",
            "status": "in_progress",
            "item": {
                "role": "role A",
                "status": "pending"
            }
        }
    }
}}
< 200
< Content-Type: application/json
{
    "search": {
        "actions": {
            "read": "/11111111-2222-3333-4444-555555555555",
            "first": "/11111111-2222-3333-4444-555555555555/page=1",
            "last": "/11111111-2222-3333-4444-555555555555/page=-1"
        },
        "uuid": "11111111-2222-3333-4444-555555555555"
    }
}


**Search for a resource by batch**

* `uuid` uuid ot a batch

The search below looks for a plate which is assigned to the batch `11111111-2222-3333-4444-666666666666` 
through an order item.

To actually get the search results, you need to access the first page of result 
thanks to the `first` action in the JSON response.
POST /searches
> Accept: application/json
{ "search": {
    "description": "search for a plate by batch",
    "model": "plate",
    "criteria": {
        "batch": {"uuid": "11111111-2222-3333-4444-666666666666"}
    }
}}
< 200
< Content-Type: application/json
{
    "search": {
        "actions": {
            "read": "/11111111-2222-3333-4444-555555555555",
            "first": "/11111111-2222-3333-4444-555555555555/page=1",
            "last": "/11111111-2222-3333-4444-555555555555/page=-1"
        },
        "uuid": "11111111-2222-3333-4444-555555555555"
    }
}


